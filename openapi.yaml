openapi: 3.0.3
info:
  title: OfficeX Filesharing API
  description: API for OfficeX filesharing app, clone of Google Drive - https://drive.officex.app
  version: 1.0.0

tags:
  - name: API Keys
    description: Operations for managing API keys

  - name: Directory
    description: Operations for managing files and folders

  - name: Directory Actions
    description: Data types and models used throughout the API. See POST /directory/actions

  - name: Contacts
    description: Operations for managing contacts

  - name: Teams
    description: Operations for managing groups

  - name: Team Invites
    description: Operations for managing group invites

  - name: Disks
    description: Operations for managing disks

  - name: Drives
    description: Operations for managing drives

  - name: Labels
    description: Operations for managing labels

  - name: Permissions by Directory
    description: Operations for managing directory and system permissions

  - name: Permissions by System
    description: Operations for managing directory and system permissions

  - name: Webhooks
    description: Operations for managing webhooks

  - name: Organization
    description: Operations for managing own drive canister

paths:
  /v1/{organization_id}/directory/list:
    post:
      tags:
        - Directory
      summary: List Directory
      description: List files and folders within a specified directory
      operationId: listDirectory
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Directory listing parameters
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListDirectoryRequest"
      responses:
        "200":
          description: Successfully retrieved directory contents
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/DirectoryListResponse"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/directory/action:
    post:
      tags:
        - Directory
      summary: Directory Actions
      description: Perform actions on files and folders such as get, create, update, delete, copy, move, and restore
      operationId: directoryAction
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Directory actions to perform
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DirectoryActionRequestBody"
            examples:
              getFile:
                summary: Get File
                value:
                  actions:
                    - action: "GET_FILE"
                      target:
                        resource_id: "FileID_abc123"
                        resource_path: "DiskID::/documents/project/file.txt"
                      payload:
                        share_track_hash: "track123"
              getFolder:
                summary: Get Folder
                value:
                  actions:
                    - action: "GET_FOLDER"
                      target:
                        resource_id: "FolderID_xyz789"
                        resource_path: "DiskID::/documents/project/"
                      payload:
                        share_track_hash: "track456"
              createFile:
                summary: Create File
                value:
                  actions:
                    - action: "CREATE_FILE"
                      target:
                        resource_id: "FolderID_xyz789"
                        resource_path: "DiskID::/documents/project/"
                      payload:
                        name: "example.txt"
                        extension: "txt"
                        tags: ["project", "documentation"]
                        file_size: 1024
                        raw_url: "https://example.com/file.txt"
                        disk_id: "DiskID_abc123"
                        expires_at: 1704067200000
                        file_conflict_resolution: "KEEP_BOTH"
                        has_sovereign_permissions: true
                        external_id: "external-file-001"
                        external_payload: '{"department": "engineering", "project": "alpha"}'
              createFolder:
                summary: Create Folder
                value:
                  actions:
                    - action: "CREATE_FOLDER"
                      target:
                        resource_id: "FolderID_xyz789"
                        resource_path: "DiskID::/documents/"
                      payload:
                        name: "project-alpha"
                        tags: ["project", "alpha"]
                        disk_id: "DiskID_abc123"
                        expires_at: 1704067200000
                        file_conflict_resolution: "KEEP_BOTH"
                        has_sovereign_permissions: true
                        external_id: "external-folder-001"
                        external_payload: '{"department": "engineering", "project": "alpha"}'
              updateFile:
                summary: Update File
                value:
                  actions:
                    - action: "UPDATE_FILE"
                      target:
                        resource_id: "FileID_abc123"
                        resource_path: "DiskID::/documents/project/file.txt"
                      payload:
                        name: "updated-example.txt"
                        tags: ["project", "updated"]
                        raw_url: "https://example.com/updated-file.txt"
                        expires_at: 1704067200000
                        external_id: "external-file-001-updated"
                        external_payload: '{"department": "engineering", "project": "alpha", "version": 2}'
              updateFolder:
                summary: Update Folder
                value:
                  actions:
                    - action: "UPDATE_FOLDER"
                      target:
                        resource_id: "FolderID_xyz789"
                        resource_path: "DiskID::/documents/project/"
                      payload:
                        name: "project-beta"
                        tags: ["project", "beta"]
                        expires_at: 1704067200000
                        external_id: "external-folder-001-updated"
                        external_payload: '{"department": "engineering", "project": "beta"}'
              deleteFile:
                summary: Delete File
                value:
                  actions:
                    - action: "DELETE_FILE"
                      target:
                        resource_id: "FileID_abc123"
                        resource_path: "DiskID::/documents/project/file.txt"
                      payload:
                        permanent: true
              deleteFolder:
                summary: Delete Folder
                value:
                  actions:
                    - action: "DELETE_FOLDER"
                      target:
                        resource_id: "FolderID_xyz789"
                        resource_path: "DiskID::/documents/project/"
                      payload:
                        permanent: true
              copyFile:
                summary: Copy File
                value:
                  actions:
                    - action: "COPY_FILE"
                      target:
                        resource_id: "FileID_abc123"
                        resource_path: "DiskID::/documents/project/file.txt"
                      payload:
                        destination_folder_id: "FolderID_new123"
                        destination_folder_path: "/documents/archive/"
                        file_conflict_resolution: "KEEP_BOTH"
              copyFolder:
                summary: Copy Folder
                value:
                  actions:
                    - action: "COPY_FOLDER"
                      target:
                        resource_id: "FolderID_xyz789"
                        resource_path: "DiskID::/documents/project/"
                      payload:
                        destination_folder_id: "FolderID_new123"
                        destination_folder_path: "/documents/archive/"
                        file_conflict_resolution: "KEEP_BOTH"
              moveFile:
                summary: Move File
                value:
                  actions:
                    - action: "MOVE_FILE"
                      target:
                        resource_id: "FileID_abc123"
                        resource_path: "DiskID::/documents/project/file.txt"
                      payload:
                        destination_folder_id: "FolderID_new123"
                        destination_folder_path: "/documents/archive/"
                        file_conflict_resolution: "KEEP_BOTH"
              moveFolder:
                summary: Move Folder
                value:
                  actions:
                    - action: "MOVE_FOLDER"
                      target:
                        resource_id: "FolderID_xyz789"
                        resource_path: "DiskID::/documents/project/"
                      payload:
                        destination_folder_id: "FolderID_new123"
                        destination_folder_path: "/documents/archive/"
                        file_conflict_resolution: "KEEP_BOTH"
              restoreTrash:
                summary: Restore from Trash
                value:
                  actions:
                    - action: "RESTORE_TRASH"
                      target:
                        resource_id: "FolderID_xyz789"
                        resource_path: "DiskID::/trash/project/"
                      payload:
                        file_conflict_resolution: "KEEP_BOTH"
                        restore_to_folder_path: "/restored-files/project/"
      responses:
        "200":
          description: Actions successfully executed
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/DirectoryActionOutcome"
                    required:
                      - data
                required:
                  - ok
              examples:
                getFileSuccess:
                  summary: Get File Success Response
                  value:
                    ok:
                      data:
                        - id: "response-id-123"
                          success: true
                          request:
                            action: "GET_FILE"
                            target:
                              resource_id: "FileID_abc123"
                              resource_path: "DiskID::/documents/project/file.txt"
                            payload:
                              share_track_hash: "track123"
                          response:
                            result:
                              file:
                                id: "FileID_abc123"
                                name: "file.txt"
                                folder_uuid: "FolderID_xyz789"
                                file_version: 1
                                extension: "txt"
                                full_file_path: "/documents/project/file.txt"
                                tags: ["project", "documentation"]
                                created_by: "UserID_123"
                                created_at: 1672531200000
                                disk_id: "DiskID_abc123"
                                disk_type: "AwsBucket"
                                file_size: 1024
                                raw_url: "https://example.com/file.txt"
                                last_updated_date_ms: 1672531200000
                                last_updated_by: "UserID_123"
                                deleted: false
                                canister_id: "abc123xyz456"
                                expires_at: 1704067200000
                                has_sovereign_permissions: true
                              permissions:
                                - permission_id: "DirectoryPermissionID_123"
                                  grant_type: "VIEW"
                                - permission_id: "DirectoryPermissionID_456"
                                  grant_type: "EDIT"
                              requester_id: "UserID_123"
                            error: null
                createFileSuccess:
                  summary: Create File Success Response
                  value:
                    ok:
                      data:
                        - id: "response-id-123"
                          success: true
                          request:
                            action: "CREATE_FILE"
                            target:
                              resource_id: "FolderID_xyz789"
                              resource_path: "DiskID::/documents/project/"
                            payload:
                              name: "example.txt"
                              extension: "txt"
                              tags: ["project", "documentation"]
                              file_size: 1024
                              raw_url: "https://example.com/file.txt"
                              disk_id: "DiskID_abc123"
                              expires_at: 1704067200000
                          response:
                            result:
                              file:
                                id: "FileID_abc123"
                                name: "example.txt"
                                folder_uuid: "FolderID_xyz789"
                                file_version: 1
                                extension: "txt"
                                full_file_path: "/documents/project/example.txt"
                                tags: ["project", "documentation"]
                                created_by: "UserID_123"
                                created_at: 1672531200000
                                disk_id: "DiskID_abc123"
                                disk_type: "AwsBucket"
                                file_size: 1024
                                raw_url: "https://example.com/file.txt"
                                last_updated_date_ms: 1672531200000
                                last_updated_by: "UserID_123"
                                deleted: false
                                canister_id: "abc123xyz456"
                                expires_at: 1704067200000
                                has_sovereign_permissions: true
                              upload:
                                url: "https://upload.example.com/presigned-url"
                                fields:
                                  key: "documents/project/example.txt"
                                  policy: "base64-encoded-policy"
                                  x-amz-signature: "signature-value"
                              notes: "File created successfully"
                            error: null
                getFolderSuccess:
                  summary: Get Folder Success Response
                  value:
                    ok:
                      data:
                        - id: "response-id-124"
                          success: true
                          request:
                            action: "GET_FOLDER"
                            target:
                              resource_id: "FolderID_xyz789"
                              resource_path: "DiskID::/documents/project/"
                            payload:
                              share_track_hash: "track456"
                          response:
                            result:
                              folder:
                                id: "FolderID_xyz789"
                                name: "project"
                                parent_folder_uuid: "FolderID_root"
                                subfolder_uuids:
                                  ["FolderID_subdir1", "FolderID_subdir2"]
                                file_uuids: ["FileID_abc123", "FileID_def456"]
                                full_folder_path: "/documents/project/"
                                tags: ["project", "active"]
                                created_by: "UserID_123"
                                created_at: 1672531200000
                                last_updated_date_ms: 1672531200000
                                last_updated_by: "UserID_123"
                                disk_id: "DiskID_abc123"
                                deleted: false
                                expires_at: 1704067200000
                                canister_id: "abc123xyz456"
                                has_sovereign_permissions: true
                              permissions:
                                - permission_id: "DirectoryPermissionID_123"
                                  grant_type: "VIEW"
                                - permission_id: "DirectoryPermissionID_456"
                                  grant_type: "EDIT"
                              requester_id: "UserID_123"
                            error: null
                createFolderSuccess:
                  summary: Create Folder Success Response
                  value:
                    ok:
                      data:
                        - id: "response-id-125"
                          success: true
                          request:
                            action: "CREATE_FOLDER"
                            target:
                              resource_id: "FolderID_xyz789"
                              resource_path: "DiskID::/documents/"
                            payload:
                              name: "project-alpha"
                              tags: ["project", "alpha"]
                              disk_id: "DiskID_abc123"
                              expires_at: 1704067200000
                          response:
                            result:
                              id: "FolderID_new123"
                              name: "project-alpha"
                              parent_folder_uuid: "FolderID_xyz789"
                              subfolder_uuids: []
                              file_uuids: []
                              full_folder_path: "/documents/project-alpha/"
                              tags: ["project", "alpha"]
                              created_by: "UserID_123"
                              created_at: 1672531200000
                              last_updated_date_ms: 1672531200000
                              last_updated_by: "UserID_123"
                              disk_id: "DiskID_abc123"
                              deleted: false
                              expires_at: 1704067200000
                              canister_id: "abc123xyz456"
                              has_sovereign_permissions: true
                            error: null

                updateFileSuccess:
                  summary: Update File Success Response
                  value:
                    ok:
                      data:
                        - id: "response-id-126"
                          success: true
                          request:
                            action: "UPDATE_FILE"
                            target:
                              resource_id: "FileID_abc123"
                              resource_path: "DiskID::/documents/project/file.txt"
                            payload:
                              name: "updated-example.txt"
                              tags: ["project", "updated"]
                              raw_url: "https://example.com/updated-file.txt"
                          response:
                            result:
                              id: "FileID_abc123"
                              name: "updated-example.txt"
                              folder_uuid: "FolderID_xyz789"
                              file_version: 2
                              prior_version: "FileID_abc122"
                              extension: "txt"
                              full_file_path: "/documents/project/updated-example.txt"
                              tags: ["project", "updated"]
                              created_by: "UserID_123"
                              created_at: 1672531200000
                              disk_id: "DiskID_abc123"
                              disk_type: "AwsBucket"
                              file_size: 1024
                              raw_url: "https://example.com/updated-file.txt"
                              last_updated_date_ms: 1674345600000
                              last_updated_by: "UserID_123"
                              deleted: false
                              canister_id: "abc123xyz456"
                              expires_at: 1704067200000
                              has_sovereign_permissions: true
                            error: null

                updateFolderSuccess:
                  summary: Update Folder Success Response
                  value:
                    ok:
                      data:
                        - id: "response-id-127"
                          success: true
                          request:
                            action: "UPDATE_FOLDER"
                            target:
                              resource_id: "FolderID_xyz789"
                              resource_path: "DiskID::/documents/project/"
                            payload:
                              name: "project-beta"
                              tags: ["project", "beta"]
                          response:
                            result:
                              id: "FolderID_xyz789"
                              name: "project-beta"
                              parent_folder_uuid: "FolderID_root"
                              subfolder_uuids:
                                ["FolderID_subdir1", "FolderID_subdir2"]
                              file_uuids: ["FileID_abc123", "FileID_def456"]
                              full_folder_path: "/documents/project-beta/"
                              tags: ["project", "beta"]
                              created_by: "UserID_123"
                              created_at: 1672531200000
                              last_updated_date_ms: 1674345600000
                              last_updated_by: "UserID_123"
                              disk_id: "DiskID_abc123"
                              deleted: false
                              expires_at: 1704067200000
                              canister_id: "abc123xyz456"
                              has_sovereign_permissions: true
                            error: null

                deleteFileSuccess:
                  summary: Delete File Success Response
                  value:
                    ok:
                      data:
                        - id: "response-id-128"
                          success: true
                          request:
                            action: "DELETE_FILE"
                            target:
                              resource_id: "FileID_abc123"
                              resource_path: "DiskID::/documents/project/file.txt"
                            payload:
                              permanent: false
                          response:
                            result:
                              file_id: "FileID_abc123"
                              path_to_trash: "/trash/documents/project/file.txt"
                            error: null

                deleteFolderSuccess:
                  summary: Delete Folder Success Response
                  value:
                    ok:
                      data:
                        - id: "response-id-129"
                          success: true
                          request:
                            action: "DELETE_FOLDER"
                            target:
                              resource_id: "FolderID_xyz789"
                              resource_path: "DiskID::/documents/project/"
                            payload:
                              permanent: false
                          response:
                            result:
                              folder_id: "FolderID_xyz789"
                              path_to_trash: "/trash/documents/project/"
                              deleted_files: ["FileID_abc123", "FileID_def456"]
                              deleted_folders:
                                ["FolderID_subdir1", "FolderID_subdir2"]
                            error: null

                copyFileSuccess:
                  summary: Copy File Success Response
                  value:
                    ok:
                      data:
                        - id: "response-id-130"
                          success: true
                          request:
                            action: "COPY_FILE"
                            target:
                              resource_id: "FileID_abc123"
                              resource_path: "DiskID::/documents/project/file.txt"
                            payload:
                              destination_folder_id: "FolderID_new123"
                              destination_folder_path: "/documents/archive/"
                              file_conflict_resolution: "KEEP_BOTH"
                          response:
                            result:
                              id: "FileID_copy123"
                              name: "file.txt"
                              folder_uuid: "FolderID_new123"
                              file_version: 1
                              extension: "txt"
                              full_file_path: "/documents/archive/file.txt"
                              tags: ["project", "documentation"]
                              created_by: "UserID_123"
                              created_at: 1674345600000
                              disk_id: "DiskID_abc123"
                              disk_type: "AwsBucket"
                              file_size: 1024
                              raw_url: "https://example.com/file-copy.txt"
                              last_updated_date_ms: 1674345600000
                              last_updated_by: "UserID_123"
                              deleted: false
                              canister_id: "abc123xyz456"
                              expires_at: 1704067200000
                              has_sovereign_permissions: true
                            error: null

                copyFolderSuccess:
                  summary: Copy Folder Success Response
                  value:
                    ok:
                      data:
                        - id: "response-id-131"
                          success: true
                          request:
                            action: "COPY_FOLDER"
                            target:
                              resource_id: "FolderID_xyz789"
                              resource_path: "DiskID::/documents/project/"
                            payload:
                              destination_folder_id: "FolderID_new123"
                              destination_folder_path: "/documents/archive/"
                              file_conflict_resolution: "KEEP_BOTH"
                          response:
                            result:
                              id: "FolderID_copy789"
                              name: "project"
                              parent_folder_uuid: "FolderID_new123"
                              subfolder_uuids:
                                ["FolderID_copysubdir1", "FolderID_copysubdir2"]
                              file_uuids:
                                ["FileID_copyabc123", "FileID_copydef456"]
                              full_folder_path: "/documents/archive/project/"
                              tags: ["project", "active"]
                              created_by: "UserID_123"
                              created_at: 1674345600000
                              last_updated_date_ms: 1674345600000
                              last_updated_by: "UserID_123"
                              disk_id: "DiskID_abc123"
                              deleted: false
                              expires_at: 1704067200000
                              canister_id: "abc123xyz456"
                              has_sovereign_permissions: true
                            error: null

                moveFileSuccess:
                  summary: Move File Success Response
                  value:
                    ok:
                      data:
                        - id: "response-id-132"
                          success: true
                          request:
                            action: "MOVE_FILE"
                            target:
                              resource_id: "FileID_abc123"
                              resource_path: "DiskID::/documents/project/file.txt"
                            payload:
                              destination_folder_id: "FolderID_new123"
                              destination_folder_path: "/documents/archive/"
                              file_conflict_resolution: "KEEP_BOTH"
                          response:
                            result:
                              id: "FileID_abc123"
                              name: "file.txt"
                              folder_uuid: "FolderID_new123"
                              file_version: 1
                              extension: "txt"
                              full_file_path: "/documents/archive/file.txt"
                              tags: ["project", "documentation"]
                              created_by: "UserID_123"
                              created_at: 1672531200000
                              disk_id: "DiskID_abc123"
                              disk_type: "AwsBucket"
                              file_size: 1024
                              raw_url: "https://example.com/file.txt"
                              last_updated_date_ms: 1674345600000
                              last_updated_by: "UserID_123"
                              deleted: false
                              canister_id: "abc123xyz456"
                              expires_at: 1704067200000
                              has_sovereign_permissions: true
                            error: null

                moveFolderSuccess:
                  summary: Move Folder Success Response
                  value:
                    ok:
                      data:
                        - id: "response-id-133"
                          success: true
                          request:
                            action: "MOVE_FOLDER"
                            target:
                              resource_id: "FolderID_xyz789"
                              resource_path: "DiskID::/documents/project/"
                            payload:
                              destination_folder_id: "FolderID_new123"
                              destination_folder_path: "/documents/archive/"
                              file_conflict_resolution: "KEEP_BOTH"
                          response:
                            result:
                              id: "FolderID_xyz789"
                              name: "project"
                              parent_folder_uuid: "FolderID_new123"
                              subfolder_uuids:
                                ["FolderID_subdir1", "FolderID_subdir2"]
                              file_uuids: ["FileID_abc123", "FileID_def456"]
                              full_folder_path: "/documents/archive/project/"
                              tags: ["project", "active"]
                              created_by: "UserID_123"
                              created_at: 1672531200000
                              last_updated_date_ms: 1674345600000
                              last_updated_by: "UserID_123"
                              disk_id: "DiskID_abc123"
                              deleted: false
                              expires_at: 1704067200000
                              canister_id: "abc123xyz456"
                              has_sovereign_permissions: true
                            error: null

                restoreTrashSuccess:
                  summary: Restore from Trash Success Response
                  value:
                    ok:
                      data:
                        - id: "response-id-134"
                          success: true
                          request:
                            action: "RESTORE_TRASH"
                            target:
                              resource_id: "FolderID_xyz789"
                              resource_path: "DiskID::/trash/project/"
                            payload:
                              file_conflict_resolution: "KEEP_BOTH"
                              restore_to_folder_path: "/restored-files/project/"
                          response:
                            result:
                              restored_files: ["FileID_abc123", "FileID_def456"]
                              restored_folders:
                                [
                                  "FolderID_xyz789",
                                  "FolderID_subdir1",
                                  "FolderID_subdir2",
                                ]
                            error: null

        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalidPermission:
                  summary: Permission Denied Error
                  value:
                    err:
                      code: 403
                      message: "You don't have permission to perform this action"
                resourceNotFound:
                  summary: Resource Not Found Error
                  value:
                    err:
                      code: 404
                      message: "The requested resource could not be found"
      security:
        - BearerAuth: []

  /v1/{organization_id}/contacts/get/{contact_id}:
    get:
      tags:
        - Contacts
      summary: Get Contact
      description: Retrieve a contact by its ID
      operationId: getContact
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - name: contact_id
          in: path
          description: ID of the contact to retrieve
          required: true
          schema:
            $ref: "#/components/schemas/UserID"
        - $ref: "#/components/parameters/AuthHeader"
      responses:
        "200":
          description: Successful retrieval of the contact
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Contact"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/contacts/list:
    post:
      tags:
        - Contacts
      summary: List Contacts
      description: List contacts with optional filtering and pagination
      operationId: listContacts
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Filtering and pagination parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: string
                  description: Filter string for contacts
                  maxLength: 256
                  default: ""
                page_size:
                  type: integer
                  description: Number of items per page
                  default: 50
                  minimum: 1
                  maximum: 1000
                direction:
                  type: string
                  description: Sort direction
                  enum: [ASC, DESC]
                  default: "ASC"
                cursor_up:
                  type: string
                  description: Cursor for pagination (previous page)
                  maxLength: 256
                  nullable: true
                cursor_down:
                  type: string
                  description: Cursor for pagination (next page)
                  maxLength: 256
                  nullable: true
      responses:
        "200":
          description: Successful retrieval of contacts
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: "#/components/schemas/Contact"
                          page_size:
                            type: integer
                            description: Number of items per page
                          total:
                            type: integer
                            description: Total number of items
                          cursor_up:
                            type: string
                            description: Cursor for pagination (previous page)
                            nullable: true
                          cursor_down:
                            type: string
                            description: Cursor for pagination (next page)
                            nullable: true
                        required:
                          - items
                          - page_size
                          - total
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/contacts/create:
    post:
      tags:
        - Contacts
      summary: Create Contact
      description: Create a new contact
      operationId: upsertContact
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Contact data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateContactRequest"
      responses:
        "200":
          description: Contact successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Contact"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/contacts/update:
    post:
      tags:
        - Contacts
      summary: Update Contact
      description: Update a contact
      operationId: upsertContact
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Contact data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateContactRequest"
      responses:
        "200":
          description: Contact successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Contact"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/contacts/delete:
    post:
      tags:
        - Contacts
      summary: Delete Contact
      description: Delete an existing contact
      operationId: deleteContact
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: ID of the contact to delete
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  $ref: "#/components/schemas/UserID"
                  description: ID of the contact to delete
              required:
                - id
      responses:
        "200":
          description: Contact successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            $ref: "#/components/schemas/UserID"
                            description: ID of the deleted contact
                          deleted:
                            type: boolean
                            description: Whether the contact was successfully deleted
                        required:
                          - id
                          - deleted
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/contacts/redeem:
    post:
      tags:
        - Contacts
      summary: Redeem a Contact
      description: Redeems a contact and superswap replace the old user id
      operationId: redeemContact
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: New owner information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_user_id:
                  $ref: "#/components/schemas/UserID"
                  description: Current user id, which is a temp
                new_user_id:
                  $ref: "#/components/schemas/UserID"
                  description: New user id decided by user
                redeem_code:
                  type: string
                  description: Redemption code to prove authority
              required:
                - giftcard_id
                - owner_icp_principal
      responses:
        "200":
          description: Successfully redeemed contact into new user id
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Contact"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/{organization_id}/directory/asset/{file_id_with_extension}:
    get:
      tags:
        - Directory
      summary: Get File Asset
      description: Proxy access to file assets with temporary presigned URLs
      operationId: getFileAsset
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - name: file_id_with_extension
          in: path
          description: File ID with file extension
          required: true
          schema:
            type: string
          example: "FileID_abc123.pdf"
        - $ref: "#/components/parameters/AuthHeader"
      responses:
        "302":
          description: Redirect to temporary presigned URL for file access
          headers:
            Location:
              schema:
                type: string
                description: URL to access the file
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/disks/get/{disk_id}:
    get:
      tags:
        - Disks
      summary: Get Disk
      description: Retrieve a disk by its ID
      operationId: getDisk
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - name: disk_id
          in: path
          description: ID of the disk to retrieve
          required: true
          schema:
            $ref: "#/components/schemas/UserID"
        - $ref: "#/components/parameters/AuthHeader"
      responses:
        "200":
          description: Successful retrieval of the disk
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Disk"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/disks/list:
    post:
      tags:
        - Disks
      summary: List Disks
      description: List disks with optional filtering and pagination
      operationId: listDisks
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Filtering and pagination parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: string
                  description: Filter string for disks
                  maxLength: 256
                  default: ""
                page_size:
                  type: integer
                  description: Number of items per page
                  default: 50
                  minimum: 1
                  maximum: 1000
                direction:
                  type: string
                  description: Sort direction
                  enum: [ASC, DESC]
                  default: "ASC"
                cursor_up:
                  type: string
                  description: Cursor for pagination (previous page)
                  maxLength: 256
                  nullable: true
                cursor_down:
                  type: string
                  description: Cursor for pagination (next page)
                  maxLength: 256
                  nullable: true
      responses:
        "200":
          description: Successful retrieval of disks
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: "#/components/schemas/Disk"
                          page_size:
                            type: integer
                            description: Number of items per page
                          total:
                            type: integer
                            description: Total number of items
                          cursor_up:
                            type: string
                            description: Cursor for pagination (previous page)
                            nullable: true
                          cursor_down:
                            type: string
                            description: Cursor for pagination (next page)
                            nullable: true
                        required:
                          - items
                          - page_size
                          - total
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/disks/create:
    post:
      tags:
        - Disks
      summary: Create Disk
      description: Create a new disk
      operationId: upsertDisk
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Disk data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDiskRequest"
      responses:
        "200":
          description: Disk successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Disk"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/disks/update:
    post:
      tags:
        - Disks
      summary: Update Disk
      description: Update a disk
      operationId: upsertDisk
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Disk data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDiskRequest"
      responses:
        "200":
          description: Disk successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Disk"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/disks/delete:
    post:
      tags:
        - Disks
      summary: Delete Disk
      description: Delete an existing disk
      operationId: deleteDisk
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: ID of the disk to delete
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  $ref: "#/components/schemas/UserID"
                  description: ID of the disk to delete
              required:
                - id
      responses:
        "200":
          description: Disk successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            $ref: "#/components/schemas/DiskID"
                            description: ID of the deleted disk
                          deleted:
                            type: boolean
                            description: Whether the disk was successfully deleted
                        required:
                          - id
                          - deleted
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/drives/get/{drive_id}:
    get:
      tags:
        - Drives
      summary: Get Drive
      description: Retrieve a drive by its ID
      operationId: getDrive
      parameters:
        - name: organization_id
          in: path
          description: Internal DriveID of own drive for REST routes
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - name: drive_id
          in: path
          description: ID of the drive to retrieve
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      responses:
        "200":
          description: Successful retrieval of the drive
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Drive"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/drives/list:
    post:
      tags:
        - Drives
      summary: List Drives
      description: List drives with optional filtering and pagination
      operationId: listDrives
      parameters:
        - name: organization_id
          in: path
          description: Internal DriveID of own drive for REST routes
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Filtering and pagination parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: string
                  description: Filter string for drives
                  maxLength: 256
                  default: ""
                page_size:
                  type: integer
                  description: Number of items per page
                  default: 50
                  minimum: 1
                  maximum: 1000
                direction:
                  type: string
                  description: Sort direction
                  enum: [ASC, DESC]
                  default: "ASC"
                cursor_up:
                  type: string
                  description: Cursor for pagination (previous page)
                  maxLength: 256
                  nullable: true
                cursor_down:
                  type: string
                  description: Cursor for pagination (next page)
                  maxLength: 256
                  nullable: true
      responses:
        "200":
          description: Successful retrieval of drives
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: "#/components/schemas/Drive"
                          page_size:
                            type: integer
                            description: Number of items per page
                          total:
                            type: integer
                            description: Total number of items
                          cursor_up:
                            type: string
                            description: Cursor for pagination (previous page)
                            nullable: true
                          cursor_down:
                            type: string
                            description: Cursor for pagination (next page)
                            nullable: true
                        required:
                          - items
                          - page_size
                          - total
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/drives/create:
    post:
      tags:
        - Drives
      summary: Create Drive
      description: Create a new drive
      operationId: upsertDrive
      parameters:
        - name: organization_id
          in: path
          description: Internal DriveID of own drive for REST routes
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Drive data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDriveRequest"
      responses:
        "200":
          description: Drive successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Drive"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/drives/update:
    post:
      tags:
        - Drives
      summary: Update Drive
      description: Update a Drive
      operationId: upsertDrive
      parameters:
        - name: organization_id
          in: path
          description: Internal DriveID of own drive for REST routes
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Drive data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDriveRequest"
      responses:
        "200":
          description: Drive successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Drive"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/drives/delete:
    post:
      tags:
        - Drives
      summary: Delete Drive
      description: Delete an existing drive
      operationId: deleteDrive
      parameters:
        - name: organization_id
          in: path
          description: Internal DriveID of own drive for REST routes
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: ID of the drive to delete
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  $ref: "#/components/schemas/DriveID"
                  description: ID of the drive to delete
              required:
                - id
      responses:
        "200":
          description: Drive successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            $ref: "#/components/schemas/DriveID"
                            description: ID of the deleted drive
                          deleted:
                            type: boolean
                            description: Whether the drive was successfully deleted
                        required:
                          - id
                          - deleted
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/organization/replay:
    post:
      tags:
        - Organization
      summary: Replay Drive
      description: Replay state diffs for a drive
      operationId: replayDrive
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: State diffs to replay
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                diffs:
                  type: array
                  items:
                    $ref: "#/components/schemas/StateDiffRecord"
                  description: List of state diffs to replay
                notes:
                  type: string
                  description: Notes about the replay
                  maxLength: 8192
                  nullable: true
              required:
                - diffs
      responses:
        "200":
          description: Successfully replayed drive state diffs
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          timestamp_ns:
                            type: integer
                            format: int64
                            description: Timestamp in nanoseconds when replay completed
                          diffs_applied:
                            type: integer
                            description: Number of diffs that were applied
                          checkpoint_diff_id:
                            type: string
                            description: ID of the checkpoint diff
                            nullable: true
                          final_checksum:
                            type: string
                            description: Final state checksum after replay
                        required:
                          - timestamp_ns
                          - diffs_applied
                          - final_checksum
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/organization/search:
    post:
      tags:
        - Organization
      summary: Search Drive
      description: Search within drives
      operationId: searchDrive
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Search parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: Search query
                  maxLength: 256
                categories:
                  type: array
                  items:
                    type: string
                    enum: [FILES, FOLDERS, METADATA]
                  description: Categories to search in
                page_size:
                  type: integer
                  description: Number of items per page
                  default: 50
                  minimum: 1
                  maximum: 1000
                cursor_up:
                  type: string
                  description: Cursor for pagination (previous page)
                  maxLength: 256
                  nullable: true
                cursor_down:
                  type: string
                  description: Cursor for pagination (next page)
                  maxLength: 256
                  nullable: true
                sort_by:
                  type: string
                  enum: [CREATED_AT, UPDATED_AT]
                  default: UPDATED_AT
                  description: Field to sort by
                direction:
                  type: string
                  enum: [ASC, DESC]
                  default: ASC
                  description: Sort direction
              required:
                - query
      responses:
        "200":
          description: Successful search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              type: object
                              description: Search result item
                          page_size:
                            type: integer
                            description: Number of items per page
                          total:
                            type: integer
                            description: Total number of items
                          cursor_up:
                            type: string
                            description: Cursor for pagination (previous page)
                            nullable: true
                          cursor_down:
                            type: string
                            description: Cursor for pagination (next page)
                            nullable: true
                        required:
                          - items
                          - page_size
                          - total
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/organization/reindex:
    post:
      tags:
        - Organization
      summary: Reindex Drive
      description: Reindex a drive's searchable content
      operationId: reindexDrive
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Reindex parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                force:
                  type: boolean
                  description: Force reindexing even if the rate limit would be exceeded
                  nullable: true
      responses:
        "200":
          description: Successful reindexing
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          success:
                            type: boolean
                            description: Whether reindexing was successful
                          timestamp_ms:
                            type: integer
                            format: int64
                            description: Timestamp when reindexing completed
                          indexed_count:
                            type: integer
                            description: Number of items indexed
                        required:
                          - success
                          - timestamp_ms
                          - indexed_count
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/organization/external_id:
    post:
      tags:
        - Organization
      summary: Get Drives by External IDs
      description: Retrieve drives using their external identifiers
      operationId: getDrivesByExternalIds
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: List of external IDs
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                external_ids:
                  type: array
                  items:
                    type: string
                    maxLength: 256
                  description: List of external IDs to lookup
              required:
                - external_ids
      responses:
        "200":
          description: Successful retrieval of drives by external IDs
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          results:
                            type: array
                            items:
                              type: object
                              properties:
                                success:
                                  type: boolean
                                  description: Whether the lookup was successful
                                message:
                                  type: string
                                  description: Result message
                                external_id:
                                  $ref: "#/components/schemas/ExternalID"
                                  description: External ID that was looked up
                                internal_ids:
                                  type: array
                                  items:
                                    type: string
                                  description: Internal IDs associated with the external ID
                                  example: ["DriveID_abc123", "UserID_xyz789"]
                              required:
                                - success
                                - message
                                - external_id
                                - internal_ids
                        required:
                          - results
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/organization/transfer_ownership:
    post:
      tags:
        - Organization
      summary: Transfer Drive Ownership
      description: Transfer ownership of a drive to another user (requires owner to call twice with 24h between calls)
      operationId: transferDriveOwnership
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: New owner information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                next_owner_id:
                  $ref: "#/components/schemas/UserID"
                  description: ID of the user to transfer ownership to
              required:
                - next_owner_id
      responses:
        "200":
          description: Ownership transfer initiated or completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          status:
                            type: string
                            enum: [REQUESTED, COMPLETED]
                            description: Status of the transfer request
                          ready_ms:
                            type: integer
                            format: int64
                            description: Timestamp when the transfer will be ready to complete
                        required:
                          - status
                          - ready_ms
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/{organization_id}/organization/whoami:
    get:
      tags:
        - Organization
      summary: Get Current User Info
      description: Get information about the current authenticated user
      operationId: getWhoAmI
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      responses:
        "200":
          description: Successfully retrieved current user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/WhoAmIReport"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/organization/superswap:
    post:
      tags:
        - Organization
      summary: Swap a userID globally in organization
      description: Swaps a users id everywhere in an organization, but not in other orgs
      operationId: superswapUser
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: New owner information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_user_id:
                  $ref: "#/components/schemas/UserID"
                  description: Current user id for replacement
                new_user_id:
                  $ref: "#/components/schemas/UserID"
                  description: New id for the user
              required:
                - next_owner_id
      responses:
        "200":
          description: Successfully swapped user id
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          success:
                            type: boolean
                            description: Whether the superswap user was successful
                          message:
                            type: string
                            description: Message about the superswap user results
                        required:
                          - success
                          - message
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/{organization_id}/organization/redeem:
    post:
      tags:
        - Organization
      summary: Swap a userID globally in organization
      description: Swaps a users id everywhere in an organization, but not in other orgs
      operationId: superswapUser
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: New owner information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                redeem_code:
                  $ref: "#/components/schemas/UserID"
                  description: Redemption code for owner api key
              required:
                - redeem_code
      responses:
        "200":
          description: Successfully got owner api key
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          drive_id:
                            $ref: "#/components/schemas/DriveID"
                            description: Spawned drive id
                          endpoint_url:
                            type: string
                            description: Spawned drive url endpoint
                          api_key:
                            type: string
                            description: Admin api key for the spawned drive
                          note:
                            type: string
                            description: Note about the spawned drive
                          admin_login_password:
                            type: string
                            description: Admin login password for the spawned drive
                        required:
                          - success
                          - message
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/{organization_id}/giftcards/redeem:
    post:
      tags:
        - Organization
      summary: Redeem a gift card
      description: Spawn an onchain organization with a prepaid giftcard
      operationId: superswapUser
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: New owner information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                giftcard_id:
                  $ref: "#/components/schemas/GiftCardID"
                  description: Redemption code for gift card
                owner_icp_principal:
                  type: string
                  description: ICP Principal string
                owner_name:
                  type: string
                  description: Name of owner
                organization_name:
                  type: string
                  description: Name of organization
              required:
                - giftcard_id
                - owner_icp_principal
      responses:
        "200":
          description: Successfully got owner api key
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          drive_id:
                            $ref: "#/components/schemas/DriveID"
                            description: Spawned drive id
                          owner_id:
                            $ref: "#/components/schemas/UserID"
                            description: Owner of the drive
                          endpoint_url:
                            type: string
                            description: http endpoint of the drive
                          redeem_code:
                            type: string
                            description: Redemption code for admin credentials
                        required:
                          - drive_id
                          - owner_id
                          - endpoint_url
                          - redeem_code
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/{organization_id}/permissions/directory/get/{directory_permission_id}:
    get:
      tags:
        - Permissions by Directory
      summary: Get Directory Permission
      description: Retrieve a directory permission by its ID
      operationId: getDirectoryPermission
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - name: directory_permission_id
          in: path
          description: ID of the directory permission to retrieve
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/AuthHeader"
      responses:
        "200":
          description: Successful retrieval of the directory permission
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/DirectoryPermission"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/permissions/directory/create:
    post:
      tags:
        - Permissions by Directory
      summary: Create Directory Permission
      description: Create a new directory permission
      operationId: upsertDirectoryPermission
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Directory permission data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDirectoryPermissionRequest"
      responses:
        "200":
          description: Directory permission successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/DirectoryPermission"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/permissions/directory/update:
    post:
      tags:
        - Permissions by Directory
      summary: Update Directory Permission
      description: Update directory permission
      operationId: upsertDirectoryPermission
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Directory permission data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDirectoryPermissionRequest"
      responses:
        "200":
          description: Directory permission successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/DirectoryPermission"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/permissions/directory/delete:
    post:
      tags:
        - Permissions by Directory
      summary: Delete Directory Permission
      description: Delete an existing directory permission
      operationId: deleteDirectoryPermission
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: ID of the directory permission to delete
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permission_id:
                  $ref: "#/components/schemas/DirectoryPermissionID"
                  description: ID of the directory permission to delete
              required:
                - permission_id
      responses:
        "200":
          description: Directory permission successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          deleted_id:
                            $ref: "#/components/schemas/DirectoryPermissionID"
                            description: ID of the deleted directory permission
                        required:
                          - deleted_id
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/permissions/directory/check:
    post:
      tags:
        - Permissions by Directory
      summary: Check Permissions by Directory
      description: Check what permissions a user has for a specific resource
      operationId: checkDirectoryPermissions
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Resource and grantee to check permissions for
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resource_id:
                  $ref: "#/components/schemas/DirectoryResourceID"
                  description: ID of the resource to check permissions for
                grantee_id:
                  $ref: "#/components/schemas/GranteeID"
                  description: ID of the user/group to check permissions for
              required:
                - resource_id
                - grantee_id
      responses:
        "200":
          description: Successful permission check
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          resource_id:
                            $ref: "#/components/schemas/DirectoryResourceID"
                            description: ID of the resource checked
                          grantee_id:
                            $ref: "#/components/schemas/GranteeID"
                            description: ID of the grantee checked
                          permissions:
                            type: array
                            items:
                              type: string
                              enum: [VIEW, UPLOAD, EDIT, DELETE, INVITE, MANAGE]
                            description: Permissions the grantee has for the resource
                        required:
                          - resource_id
                          - grantee_id
                          - permissions
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/permissions/directory/redeem:
    post:
      tags:
        - Permissions by Directory
      summary: Redeem Directory Permission
      description: Redeem a placeholder permission for a specific user
      operationId: redeemDirectoryPermission
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Permission and user information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permission_id:
                  $ref: "#/components/schemas/DirectoryPermissionID"
                  description: ID of the placeholder permission to redeem
                user_id:
                  $ref: "#/components/schemas/UserID"
                  description: ID of the user to redeem the permission for
              required:
                - permission_id
                - user_id
      responses:
        "200":
          description: Permission successfully redeemed
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          permission:
                            $ref: "#/components/schemas/DirectoryPermission"
                        required:
                          - permission
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/permissions/system/get/{system_permission_id}:
    get:
      tags:
        - Permissions by System
      summary: Get System Permission
      description: Retrieve a system permission by its ID
      operationId: getSystemPermission
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - name: system_permission_id
          in: path
          description: ID of the system permission to retrieve
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/AuthHeader"
      responses:
        "200":
          description: Successful retrieval of the system permission
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/SystemPermission"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/permissions/system/create:
    post:
      tags:
        - Permissions by System
      summary: Create System Permission
      description: Create a new system permission
      operationId: upsertSystemPermission
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: System permission data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSystemPermissionRequest"
      responses:
        "200":
          description: System permission successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/SystemPermission"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/permissions/system/update:
    post:
      tags:
        - Permissions by System
      summary: Update System Permission
      description: Update system permission
      operationId: upsertSystemPermission
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: System permission data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSystemPermissionRequest"
      responses:
        "200":
          description: System permission successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/SystemPermission"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/permissions/system/delete:
    post:
      tags:
        - Permissions by System
      summary: Delete System Permission
      description: Delete an existing system permission
      operationId: deleteSystemPermission
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: ID of the system permission to delete
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permission_id:
                  $ref: "#/components/schemas/SystemPermissionID"
                  description: ID of the system permission to delete
              required:
                - permission_id
      responses:
        "200":
          description: System permission successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          deleted_id:
                            $ref: "#/components/schemas/SystemPermissionID"
                            description: ID of the deleted system permission
                        required:
                          - deleted_id
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/permissions/system/check:
    post:
      tags:
        - Permissions by System
      summary: Check Permissions by System
      description: Check what permissions a user has for a specific system resource
      operationId: checkSystemPermissions
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Resource and grantee to check permissions for
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resource_id:
                  $ref: "#/components/schemas/SystemResourceID"
                  description: ID of the resource to check permissions for
                grantee_id:
                  $ref: "#/components/schemas/GranteeID"
                  description: ID of the user/group to check permissions for
              required:
                - resource_id
                - grantee_id
      responses:
        "200":
          description: Successful permission check
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          resource_id:
                            $ref: "#/components/schemas/SystemResourceID"
                            description: ID of the resource checked
                          grantee_id:
                            $ref: "#/components/schemas/GranteeID"
                            description: ID of the grantee checked
                          permissions:
                            type: array
                            items:
                              type: string
                              enum: [CREATE, UPDATE, DELETE, VIEW, INVITE]
                            description: Permissions the grantee has for the resource
                        required:
                          - resource_id
                          - grantee_id
                          - permissions
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/permissions/system/redeem:
    post:
      tags:
        - Permissions by System
      summary: Redeem System Permission
      description: Redeem a placeholder permission for a specific user
      operationId: redeemSystemPermission
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Permission and user information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permission_id:
                  $ref: "#/components/schemas/SystemPermissionID"
                  description: ID of the placeholder permission to redeem
                user_id:
                  $ref: "#/components/schemas/UserID"
                  description: ID of the user to redeem the permission for
              required:
                - permission_id
                - user_id
      responses:
        "200":
          description: Permission successfully redeemed
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          permission:
                            $ref: "#/components/schemas/SystemPermission"
                        required:
                          - permission
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/labels/get/{label_id}:
    get:
      tags:
        - Labels
      summary: Get Label
      description: Retrieve a label by its ID
      operationId: getLabel
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - name: id
          in: path
          description: ID of the label to retrieve, or the label value string itself
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/AuthHeader"
      responses:
        "200":
          description: Successful retrieval of the label
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Label"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/labels/list:
    post:
      tags:
        - Labels
      summary: List Labels
      description: List labels with optional filtering and pagination
      operationId: listLabels
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Filtering and pagination parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: object
                  properties:
                    prefix:
                      type: string
                      description: Filter labels by prefix
                      maxLength: 256
                      nullable: true
                page_size:
                  type: integer
                  description: Number of items per page
                  default: 50
                  minimum: 1
                  maximum: 1000
                direction:
                  type: string
                  description: Sort direction
                  enum: [ASC, DESC]
                  default: "ASC"
                cursor_up:
                  type: string
                  description: Cursor for pagination (previous page)
                  maxLength: 256
                  nullable: true
                cursor_down:
                  type: string
                  description: Cursor for pagination (next page)
                  maxLength: 256
                  nullable: true
      responses:
        "200":
          description: Successful retrieval of labels
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: "#/components/schemas/Label"
                          page_size:
                            type: integer
                            description: Number of items per page
                          total:
                            type: integer
                            description: Total number of items
                          cursor_up:
                            type: string
                            description: Cursor for pagination (previous page)
                            nullable: true
                          cursor_down:
                            type: string
                            description: Cursor for pagination (next page)
                            nullable: true
                        required:
                          - items
                          - page_size
                          - total
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/labels/create:
    post:
      tags:
        - Labels
      summary: Create Label
      description: Create a new label
      operationId: upsertLabel
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Label data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLabelRequest"
      responses:
        "200":
          description: Label successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Label"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/labels/update:
    post:
      tags:
        - Labels
      summary: Update Label
      description: Update a label or
      operationId: upsertLabel
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Label data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLabelRequest"
      responses:
        "200":
          description: Label successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Label"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/labels/delete:
    post:
      tags:
        - Labels
      summary: Delete Label
      description: Delete an existing label
      operationId: deleteLabel
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: ID of the label to delete
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  $ref: "#/components/schemas/LabelID"
                  description: ID of the label to delete
              required:
                - id
      responses:
        "200":
          description: Label successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            $ref: "#/components/schemas/LabelID"
                            description: ID of the deleted label
                          deleted:
                            type: boolean
                            description: Whether the label was successfully deleted
                        required:
                          - id
                          - deleted
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/labels/pin:
    post:
      tags:
        - Labels
      summary: Add or Remove Label from Resource
      description: Add or remove a label from a resource
      operationId: labelResource
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Label and resource information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                label_id:
                  $ref: "#/components/schemas/LabelID"
                  description: ID of the label
                resource_id:
                  type: string
                  description: ID of the resource to label or unlabel (can be any ID)
                  example: "DriveID_abc123"
                add:
                  type: boolean
                  description: True to add the label, false to remove it
              required:
                - label_id
                - resource_id
                - add
            examples:
              addExample:
                summary: "Add Label"
                value:
                  tag_id: "LabelID_abc123"
                  resource_id: "DriveID_xyz789"
                  add: true
              removeExample:
                summary: "Remove Label"
                value:
                  tag_id: "LabelID_abc123"
                  resource_id: "DriveID_xyz789"
                  add: false
      responses:
        "200":
          description: Label operation completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          success:
                            type: boolean
                            description: Whether the operation was successful
                          message:
                            type: string
                            description: Additional information about the operation
                            nullable: true
                          label:
                            $ref: "#/components/schemas/Label"
                            nullable: true
                        required:
                          - success
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/groups/get/{group_id}:
    get:
      tags:
        - Teams
      summary: Get Team
      description: Retrieve a group by its ID
      operationId: getTeam
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - name: group_id
          in: path
          description: ID of the group to retrieve
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/AuthHeader"
      responses:
        "200":
          description: Successful retrieval of the group
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Team"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/groups/list:
    post:
      tags:
        - Teams
      summary: List Teams
      description: List groups with optional filtering and pagination
      operationId: listTeams
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Filtering and pagination parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: string
                  description: Filter string for groups
                  maxLength: 256
                  default: ""
                page_size:
                  type: integer
                  description: Number of items per page
                  default: 50
                  minimum: 1
                  maximum: 1000
                direction:
                  type: string
                  description: Sort direction
                  enum: [ASC, DESC]
                  default: "ASC"
                cursor_up:
                  type: string
                  description: Cursor for pagination (previous page)
                  maxLength: 256
                  nullable: true
                cursor_down:
                  type: string
                  description: Cursor for pagination (next page)
                  maxLength: 256
                  nullable: true
      responses:
        "200":
          description: Successful retrieval of groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: "#/components/schemas/Team"
                          page_size:
                            type: integer
                            description: Number of items per page
                          total:
                            type: integer
                            description: Total number of items
                          cursor_up:
                            type: string
                            description: Cursor for pagination (previous page)
                            nullable: true
                          cursor_down:
                            type: string
                            description: Cursor for pagination (next page)
                            nullable: true
                        required:
                          - items
                          - page_size
                          - total
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/groups/create:
    post:
      tags:
        - Teams
      summary: Create Team
      description: Create a new group
      operationId: upsertTeam
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Team data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTeamRequest"
      responses:
        "200":
          description: Team successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Team"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/groups/update:
    post:
      tags:
        - Teams
      summary: Update Team
      description: Update group
      operationId: upsertTeam
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Team data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTeamRequest"
      responses:
        "200":
          description: Team successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Team"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/groups/delete:
    post:
      tags:
        - Teams
      summary: Delete Team
      description: Delete an existing group
      operationId: deleteTeam
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: ID of the group to delete
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  $ref: "#/components/schemas/TeamID"
                  description: ID of the group to delete
              required:
                - id
      responses:
        "200":
          description: Team successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            $ref: "#/components/schemas/TeamID"
                            description: ID of the deleted group
                          deleted:
                            type: boolean
                            description: Whether the group was successfully deleted
                        required:
                          - id
                          - deleted
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/groups/validate:
    post:
      tags:
        - Teams
      summary: Validate Member
      description: Verify if a user belongs to a specific group
      operationId: validateTeam
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: User and group information to validate
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  $ref: "#/components/schemas/UserID"
                  description: ID of the user to check
                group_id:
                  $ref: "#/components/schemas/TeamID"
                  description: ID of the group to check
              required:
                - user_id
                - group_id
      responses:
        "200":
          description: Team membership validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          is_member:
                            type: boolean
                            description: Whether the user is a member of the group
                          group_id:
                            $ref: "#/components/schemas/TeamID"
                            description: ID of the group that was checked
                          user_id:
                            $ref: "#/components/schemas/UserID"
                            description: ID of the user that was checked
                        required:
                          - is_member
                          - group_id
                          - user_id
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/groups/invites/get/{invite_id}:
    get:
      tags:
        - Team Invites
      summary: Get Team Invite
      description: Retrieve a group invite by its ID
      operationId: getTeamInvite
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - name: invite_id
          in: path
          description: ID of the group invite to retrieve
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/AuthHeader"
      responses:
        "200":
          description: Successful retrieval of the group invite
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/TeamInvite"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/groups/invites/list:
    post:
      tags:
        - Team Invites
      summary: List Team Invites
      description: List group invites with optional filtering and pagination
      operationId: listTeamInvites
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Team ID and pagination parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                group_id:
                  $ref: "#/components/schemas/TeamID"
                  description: ID of the group to list invites for
                filters:
                  type: string
                  description: Filter string for group invites
                  maxLength: 256
                  default: ""
                page_size:
                  type: integer
                  description: Number of items per page
                  default: 50
                  minimum: 1
                  maximum: 1000
                direction:
                  type: string
                  description: Sort direction
                  enum: [ASC, DESC]
                  default: "ASC"
                cursor_up:
                  type: string
                  description: Cursor for pagination (previous page)
                  maxLength: 256
                  nullable: true
                cursor_down:
                  type: string
                  description: Cursor for pagination (next page)
                  maxLength: 256
                  nullable: true
              required:
                - group_id
      responses:
        "200":
          description: Successful retrieval of group invites
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: "#/components/schemas/TeamInvite"
                          page_size:
                            type: integer
                            description: Number of items per page
                          total:
                            type: integer
                            description: Total number of items
                          cursor_up:
                            type: string
                            description: Cursor for pagination (previous page)
                            nullable: true
                          cursor_down:
                            type: string
                            description: Cursor for pagination (next page)
                            nullable: true
                        required:
                          - items
                          - page_size
                          - total
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/groups/invites/create:
    post:
      tags:
        - Team Invites
      summary: Create Team Invite
      description: Create a new group invite
      operationId: upsertTeamInvite
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Team invite data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTeamInviteRequest"
      responses:
        "200":
          description: Team invite successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/TeamInvite"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/groups/invites/update:
    post:
      tags:
        - Team Invites
      summary: Update Team Invite
      description: Update group invite
      operationId: upsertTeamInvite
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Team invite data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTeamInviteRequest"
      responses:
        "200":
          description: Team invite successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/TeamInvite"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/groups/invites/delete:
    post:
      tags:
        - Team Invites
      summary: Delete Team Invite
      description: Delete an existing group invite
      operationId: deleteTeamInvite
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: ID of the group invite to delete
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  $ref: "#/components/schemas/TeamInviteID"
                  description: ID of the group invite to delete
              required:
                - id
      responses:
        "200":
          description: Team invite successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            $ref: "#/components/schemas/TeamInviteID"
                            description: ID of the deleted group invite
                          deleted:
                            type: boolean
                            description: Whether the group invite was successfully deleted
                        required:
                          - id
                          - deleted
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/groups/invites/redeem:
    post:
      tags:
        - Team Invites
      summary: Redeem Team Invite
      description: Redeem a group invite for a specific user
      operationId: redeemTeamInvite
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Invite and user information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                invite_id:
                  $ref: "#/components/schemas/TeamInviteID"
                  description: ID of the group invite to redeem
                user_id:
                  $ref: "#/components/schemas/UserID"
                  description: ID of the user to redeem the invite for
              required:
                - invite_id
                - user_id
      responses:
        "200":
          description: Team invite successfully redeemed
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          invite:
                            $ref: "#/components/schemas/TeamInvite"
                        required:
                          - invite
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/webhooks/get/{webhook_id}:
    get:
      tags:
        - Webhooks
      summary: Get Webhook
      description: Retrieve a webhook by its ID
      operationId: getWebhook
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - name: webhook_id
          in: path
          description: ID of the webhook to retrieve
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/AuthHeader"
      responses:
        "200":
          description: Successful retrieval of the webhook
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Webhook"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/webhooks/list:
    post:
      tags:
        - Webhooks
      summary: List Webhooks
      description: List webhooks with optional filtering and pagination
      operationId: listWebhooks
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Filtering and pagination parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: string
                  description: Filter string for webhooks
                  maxLength: 256
                  default: ""
                page_size:
                  type: integer
                  description: Number of items per page
                  default: 50
                  minimum: 1
                  maximum: 1000
                direction:
                  type: string
                  description: Sort direction
                  enum: [ASC, DESC]
                  default: "ASC"
                cursor_up:
                  type: string
                  description: Cursor for pagination (previous page)
                  maxLength: 256
                  nullable: true
                cursor_down:
                  type: string
                  description: Cursor for pagination (next page)
                  maxLength: 256
                  nullable: true
      responses:
        "200":
          description: Successful retrieval of webhooks
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: "#/components/schemas/Webhook"
                          page_size:
                            type: integer
                            description: Number of items per page
                          total:
                            type: integer
                            description: Total number of items
                          cursor_up:
                            type: string
                            description: Cursor for pagination (previous page)
                            nullable: true
                          cursor_down:
                            type: string
                            description: Cursor for pagination (next page)
                            nullable: true
                        required:
                          - items
                          - page_size
                          - total
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/webhooks/create:
    post:
      tags:
        - Webhooks
      summary: Create Webhook
      description: Create a new webhook
      operationId: upsertWebhook
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Webhook data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWebhookRequest"
      responses:
        "200":
          description: Webhook successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Webhook"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/webhooks/update:
    post:
      tags:
        - Webhooks
      summary: Update Webhook
      description: Update webhook
      operationId: upsertWebhook
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: Webhook data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWebhookRequest"
      responses:
        "200":
          description: Webhook successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Webhook"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/webhooks/delete:
    post:
      tags:
        - Webhooks
      summary: Delete Webhook
      description: Delete an existing webhook
      operationId: deleteWebhook
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: ID of the webhook to delete
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  $ref: "#/components/schemas/WebhookID"
                  description: ID of the webhook to delete
              required:
                - id
      responses:
        "200":
          description: Webhook successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            $ref: "#/components/schemas/WebhookID"
                            description: ID of the deleted webhook
                          deleted:
                            type: boolean
                            description: Whether the webhook was successfully deleted
                        required:
                          - id
                          - deleted
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/api_keys/get/{api_key_id}:
    get:
      tags:
        - API Keys
      summary: Get API Key
      description: Retrieve an API key by its ID
      operationId: getApiKey
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - name: api_key_id
          in: path
          description: ID of the API key to retrieve
          required: true
          schema:
            $ref: "#/components/schemas/ApiKeyID"
        - $ref: "#/components/parameters/AuthHeader"
      responses:
        "200":
          description: Successful retrieval of the API key
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/ApiKey"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/api_keys/list/{user_id}:
    post:
      tags:
        - API Keys
      summary: List API Keys
      description: List all API keys for a specific user
      operationId: listApiKeys
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - name: user_id
          in: path
          description: ID of the user whose API keys to list
          required: true
          schema:
            $ref: "#/components/schemas/UserID"
        - $ref: "#/components/parameters/AuthHeader"
      responses:
        "200":
          description: Successful retrieval of API keys
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/ApiKey"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/api_keys/create:
    post:
      tags:
        - API Keys
      summary: Create API Key
      description: Create a new API key
      operationId: upsertApiKey
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: API key data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApiKeyRequest"
      responses:
        "200":
          description: API key successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/ApiKey"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/api_keys/update:
    post:
      tags:
        - API Keys
      summary: Update API Key
      description: Update API key
      operationId: upsertApiKey
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: API key data to create or update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateApiKeyRequest"
      responses:
        "200":
          description: API key successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/ApiKey"
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

  /v1/{organization_id}/api_keys/delete:
    post:
      tags:
        - API Keys
      summary: Delete API Key
      description: Delete an existing API key
      operationId: deleteApiKey
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DriveID"
        - $ref: "#/components/parameters/AuthHeader"
      requestBody:
        description: ID of the API key to delete
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  $ref: "#/components/schemas/ApiKeyID"
                  description: ID of the API key to delete
                  maxLength: 256
              required:
                - id
      responses:
        "200":
          description: API key successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            $ref: "#/components/schemas/ApiKeyID"
                            description: ID of the deleted API key
                          deleted:
                            type: boolean
                            description: Whether the API key was successfully deleted
                        required:
                          - id
                          - deleted
                    required:
                      - data
                required:
                  - ok
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []

components:
  parameters:
    AuthHeader:
      name: Authorization
      in: header
      description: Bearer token for authentication
      required: true
      schema:
        type: string
        pattern: "Bearer TOKEN"
        example: "Bearer eyJhbGciOiJIUz..."

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: Bearer token for authentication

  schemas:
    # =========================================================================
    # Core Data Models
    # =========================================================================

    FileRecord:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/FileID"
          description: Unique identifier for the file
        name:
          type: string
          description: Name of the file
        folder_uuid:
          $ref: "#/components/schemas/FolderID"
          description: ID of the folder containing this file
        file_version:
          type: integer
          format: int32
          description: Version number of the file
        prior_version:
          $ref: "#/components/schemas/FileID"
          description: ID of the previous version of this file
          nullable: true
        next_version:
          $ref: "#/components/schemas/FileID"
          description: ID of the next version of this file
          nullable: true
        extension:
          type: string
          description: File extension
        full_file_path:
          $ref: "#/components/schemas/DriveFullFilePath"
          description: Full path to the file
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagValue"
          description: Tags associated with the file
        created_by:
          $ref: "#/components/schemas/UserID"
          description: ID of the user who created the file
        created_at:
          type: integer
          format: int64
          description: Timestamp when the file was created (Unix ms)
        disk_id:
          $ref: "#/components/schemas/DiskID"
          description: ID of the disk storing the file
        disk_type:
          $ref: "#/components/schemas/DiskType"
          description: Type of disk storing the file
        file_size:
          type: integer
          format: int64
          description: Size of the file in bytes
        raw_url:
          type: string
          description: URL where the raw file content can be accessed
        last_updated_date_ms:
          type: integer
          format: int64
          description: Timestamp when the file was last updated (Unix ms)
        last_updated_by:
          $ref: "#/components/schemas/UserID"
          description: ID of the user who last updated the file
        deleted:
          type: boolean
          description: Whether the file is deleted/in trash
        canister_id:
          $ref: "#/components/schemas/ICPPrincipalString"
          description: ID of the canister storing the file
        expires_at:
          type: integer
          format: int64
          description: Timestamp when the file expires
        restore_trash_prior_folder_path:
          $ref: "#/components/schemas/DriveFullFilePath"
          description: Original path before the file was moved to trash
          nullable: true
        has_sovereign_permissions:
          type: boolean
          description: Whether the file has sovereign permissions
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          nullable: true
      required:
        - id
        - name
        - folder_uuid
        - file_version
        - extension
        - full_file_path
        - tags
        - created_by
        - created_at
        - disk_id
        - disk_type
        - file_size
        - raw_url
        - last_updated_date_ms
        - last_updated_by
        - deleted
        - canister_id
        - expires_at
        - has_sovereign_permissions

    FolderRecord:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/FolderID"
          description: Unique identifier for the folder
        name:
          type: string
          description: Name of the folder
        parent_folder_uuid:
          $ref: "#/components/schemas/FolderID"
          description: ID of the parent folder
          nullable: true
        subfolder_uuids:
          type: array
          items:
            $ref: "#/components/schemas/FolderID"
          description: IDs of subfolders contained in this folder
        file_uuids:
          type: array
          items:
            $ref: "#/components/schemas/FileID"
          description: IDs of files contained in this folder
        full_folder_path:
          $ref: "#/components/schemas/DriveFullFilePath"
          description: Full path to the folder
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagValue"
          description: Tags associated with the folder
        created_by:
          $ref: "#/components/schemas/UserID"
          description: ID of the user who created the folder
        created_at:
          type: integer
          format: int64
          description: Timestamp when the folder was created (Unix ms)
        last_updated_date_ms:
          type: integer
          format: int64
          description: Timestamp when the folder was last updated (Unix ms)
        last_updated_by:
          $ref: "#/components/schemas/UserID"
          description: ID of the user who last updated the folder
        disk_id:
          $ref: "#/components/schemas/DiskID"
          description: ID of the disk storing the folder
        deleted:
          type: boolean
          description: Whether the folder is deleted/in trash
        expires_at:
          type: integer
          format: int64
          description: Timestamp when the folder expires
        canister_id:
          $ref: "#/components/schemas/ICPPrincipalString"
          description: ID of the canister storing the folder
        restore_trash_prior_folder_path:
          $ref: "#/components/schemas/DriveFullFilePath"
          description: Original path before the folder was moved to trash
          nullable: true
        has_sovereign_permissions:
          type: boolean
          description: Whether the folder has sovereign permissions
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          nullable: true
      required:
        - id
        - name
        - subfolder_uuids
        - file_uuids
        - full_folder_path
        - tags
        - created_by
        - created_at
        - last_updated_date_ms
        - last_updated_by
        - disk_id
        - deleted
        - expires_at
        - canister_id
        - has_sovereign_permissions

    ApiKey:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ApiKeyID"
        value:
          $ref: "#/components/schemas/ApiKeyValue"
          description: This is only visible on GET, not list
        user_id:
          $ref: "#/components/schemas/UserID"
        name:
          type: string
          description: Human-readable name for the API key
        created_at:
          type: integer
          format: int64
          description: Timestamp when the API key was created
        expires_at:
          type: integer
          format: int64
          description: Timestamp when the API key expires, -1 for never expires
        is_revoked:
          type: boolean
          description: Whether the API key has been revoked
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagValue"
          description: Tags associated with the API key
        external_id:
          $ref: "#/components/schemas/ExternalID"
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          nullable: true
      required:
        - id
        - value
        - user_id
        - name
        - created_at
        - expires_at
        - is_revoked

    Contact:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserID"
        name:
          type: string
          description: Human-readable nickname for the contact
        avatar:
          type: string
          description: Profile picture url for the contact
        notifications_url:
          type: string
          description: Alert webhook URL for the contact
        email:
          type: string
          description: Primary email for the contact
        public_note:
          type: string
          description: Public note about the contact
        private_note:
          type: string
          description: Private note about the contact
          nullable: true
        evm_public_address:
          $ref: "#/components/schemas/EvmPublicAddress"
          description: EVM public address
        icp_principal:
          $ref: "#/components/schemas/ICPPrincipalString"
        groups:
          type: array
          items:
            $ref: "#/components/schemas/TeamID"
          description: Teams the contact belongs to
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagValue"
          description: Tags associated with the contact
        created_at:
          type: integer
          format: int64
          description: Timestamp ms when the contact was created
        last_online_at:
          type: integer
          format: int64
          description: Timestamp ms when the contact was last online
          nullable: true
        group_previews:
          type: array
          description: Preview of groups the contact belongs to
          items:
            $ref: "#/components/schemas/ContactTeamPreview"
        permission_previews:
          type: array
          description: Preview of permissions the requester has
          items:
            enum: [CREATE, UPDATE, DELETE, VIEW, INVITE]
        external_id:
          $ref: "#/components/schemas/ExternalID"
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          nullable: true
      required:
        - id
        - nickname
        - public_note
        - evm_public_address
        - icp_principal
        - groups
        - tags

    Disk:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/DiskID"
        name:
          type: string
          description: Human-readable name for the disk
        disk_type:
          $ref: "#/components/schemas/DiskType"
        public_note:
          type: string
          description: Public note about the disk
          nullable: true
        private_note:
          type: string
          description: Private note about the disk
          nullable: true
        auth_json:
          type: string
          description: Authentication JSON for the disk
          nullable: true
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagValue"
          description: Tags associated with the disk
        external_id:
          $ref: "#/components/schemas/ExternalID"
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          nullable: true
        created_at:
          type: integer
          format: int64
          description: Timestamp ms when the disk was created
      required:
        - id
        - name
        - disk_type
        - tags

    Drive:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/DriveID"
          description: Unique identifier for the drive
        name:
          type: string
          description: Human-readable name for the drive
        icp_principal:
          $ref: "#/components/schemas/ICPPrincipalString"
          description: ICP principal associated with the drive
        public_note:
          type: string
          description: Public note about the drive
          nullable: true
        private_note:
          type: string
          description: Private note about the drive
          nullable: true
        endpoint_url:
          type: string
          description: URL endpoint for the drive's REST API
        last_indexed_ms:
          type: integer
          format: int64
          description: Timestamp when the drive was last indexed
          nullable: true
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the drive
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          nullable: true
        created_at:
          type: integer
          format: int64
          description: Timestamp ms when the drive was created
      required:
        - id
        - name
        - icp_principal
        - endpoint_url
        - tags

    Label:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/LabelID"
          description: Unique identifier for the label
        value:
          type: string
          description: Text value of the label
        description:
          type: string
          description: Description of the label
          nullable: true
        color:
          type: string
          description: Color code in hex format
        created_by:
          type: string
          description: ID of the user who created the label
        created_at:
          type: integer
          format: int64
          description: Timestamp when the label was created
        last_updated_at:
          type: integer
          format: int64
          description: Timestamp when the label was last updated
        resources:
          type: array
          items:
            type: object
            description: Resources tagged with this label
        tags:
          type: array
          items:
            type: string
            description: Other tags associated with this label
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          nullable: true
      required:
        - id
        - value
        - color
        - created_by
        - created_at
        - last_updated_at
        - resources
        - tags

    Team:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/TeamID"
          description: Unique identifier for the group
        name:
          type: string
          description: Name of the group
        avatar:
          type: string
          description: Profile picture url for the group
        owner:
          type: string
          description: ID of the group owner
        public_note:
          type: string
          description: Public note about the group
          nullable: true
        private_note:
          type: string
          description: Private note about the group
          nullable: true
        admin_invites:
          type: array
          items:
            type: string
          description: List of admin invite IDs
        member_invites:
          type: array
          items:
            type: string
          description: List of member invite IDs
        created_at:
          type: integer
          format: int64
          description: Timestamp when the group was created
        last_modified_at:
          type: integer
          format: int64
          description: Timestamp when the group was last modified
        drive_id:
          $ref: "#/components/schemas/DriveID"
          description: ID of the group's drive
        endpoint_url:
          type: string
          description: URL endpoint for the group
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the group
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          nullable: true
      required:
        - id
        - name
        - owner
        - admin_invites
        - member_invites
        - created_at
        - last_modified_at
        - drive_id
        - endpoint_url
        - tags

    TeamInvite:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/TeamInviteID"
          description: Unique identifier for the group invite
        group_id:
          $ref: "#/components/schemas/TeamID"
          description: ID of the group the invite is for
        inviter_id:
          $ref: "#/components/schemas/UserID"
          description: ID of the user who created the invite
        invitee_id:
          $ref: "#/components/schemas/UserID"
          description: ID of the user being invited
        role:
          type: string
          enum: [ADMIN, MEMBER]
          description: Role assigned to the invitee
        note:
          type: string
          description: Note about the invite
        active_from:
          type: integer
          format: int64
          description: Timestamp when the invite becomes active
        expires_at:
          type: integer
          format: int64
          description: Timestamp when the invite expires
        created_at:
          type: integer
          format: int64
          description: Timestamp when the invite was created
        last_modified_at:
          type: integer
          format: int64
          description: Timestamp when the invite was last modified
        from_placeholder_invitee:
          type: string
          description: PlaceholderID of the placeholder invitee if redeemed
          nullable: true
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagValue"
          description: Tags associated with the invite
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          nullable: true
      required:
        - id
        - group_id
        - inviter_id
        - invitee_id
        - role
        - note
        - active_from
        - expires_at
        - created_at
        - last_modified_at
        - tags

    Webhook:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/WebhookID"
          description: Unique identifier for the webhook
        url:
          type: string
          description: URL endpoint where webhook events are sent
        alt_index:
          type: string
          description: Alternative index for the webhook
        event:
          $ref: "#/components/schemas/WebhookEventLabel"
          description: Type of event that triggers the webhook
        signature:
          type: string
          description: Signature for webhook verification
        description:
          type: string
          description: Description of the webhook purpose
        active:
          type: boolean
          description: Whether the webhook is currently active
        filters:
          type: string
          description: Filter criteria for webhook events
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the webhook
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          nullable: true
        created_at:
          type: integer
          format: int64
          description: Timestamp ms when the webhook was created
      required:
        - id
        - url
        - alt_index
        - event
        - signature
        - description
        - active
        - filters
        - tags

    DirectoryPermission:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/DirectoryPermissionID"
          description: Unique identifier for the directory permission
        resource_id:
          $ref: "#/components/schemas/DirectoryResourceID"
          description: ID of the resource the permission applies to
        resource_path:
          type: string
          description: Path of the resource the permission applies to
        granted_to:
          $ref: "#/components/schemas/GranteeID"
          description: ID of the user/group granted the permission
        granted_by:
          $ref: "#/components/schemas/UserID"
          description: ID of the user who granted the permission
        permission_types:
          type: array
          items:
            type: string
            enum: [VIEW, UPLOAD, EDIT, DELETE, INVITE, MANAGE]
          description: Types of permissions granted
        begin_date_ms:
          type: integer
          format: int64
          description: When the permission becomes active
        expiry_date_ms:
          type: integer
          format: int64
          description: When the permission expires
        inheritable:
          type: boolean
          description: Whether permission applies to sub-resources
        note:
          type: string
          description: Note about the permission
        created_at:
          type: integer
          format: int64
          description: Timestamp when the permission was created
        last_modified_at:
          type: integer
          format: int64
          description: Timestamp when the permission was last modified
        from_placeholder_grantee:
          type: string
          description: ID of the placeholder grantee if redeemed
          nullable: true
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the permission
      required:
        - id
        - resource_id
        - resource_path
        - granted_to
        - granted_by
        - permission_types
        - begin_date_ms
        - expiry_date_ms
        - inheritable
        - note
        - created_at
        - last_modified_at
        - tags

    SystemPermission:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/SystemPermissionID"
          description: Unique identifier for the system permission
        resource_id:
          $ref: "#/components/schemas/SystemResourceID"
          description: ID of the system resource the permission applies to
        granted_to:
          $ref: "#/components/schemas/GranteeID"
          description: ID of the user/group granted the permission
        granted_by:
          $ref: "#/components/schemas/UserID"
          description: ID of the user who granted the permission
        permission_types:
          type: array
          items:
            type: string
            enum: [CREATE, EDIT, DELETE, VIEW, INVITE]
          description: Types of permissions granted
        begin_date_ms:
          type: integer
          format: int64
          description: When the permission becomes active
        expiry_date_ms:
          type: integer
          format: int64
          description: When the permission expires
        note:
          type: string
          description: Note about the permission
        created_at:
          type: integer
          format: int64
          description: Timestamp when the permission was created
        last_modified_at:
          type: integer
          format: int64
          description: Timestamp when the permission was last modified
        from_placeholder_grantee:
          type: string
          description: ID of the placeholder grantee if redeemed
          nullable: true
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the permission
        metadata:
          type: object
          description: Additional metadata for the permission
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          nullable: true
      required:
        - id
        - resource_id
        - granted_to
        - granted_by
        - permission_types
        - begin_date_ms
        - expiry_date_ms
        - note
        - created_at
        - last_modified_at
        - tags

    WhoAmIReport:
      type: object
      properties:
        userID:
          $ref: "#/components/schemas/UserID"
          description: ID of the authenticated user
        driveID:
          $ref: "#/components/schemas/DriveID"
          description: ID of the user's drive
        icp_principal:
          $ref: "#/components/schemas/ICPPrincipalString"
          description: ICP principal of the user
        evm_public_address:
          type: string
          description: EVM public address of the user
          nullable: true
        is_owner:
          type: boolean
          description: Whether the user is the owner of the drive
      required:
        - userID
        - driveID
        - icp_principal
        - is_owner

    # =========================================================================
    # IDs (grouped together)
    # =========================================================================

    FileID:
      type: string
      description: Unique identifier for a file
      example: "FileID_abc123"

    FolderID:
      type: string
      description: Unique identifier for a folder
      example: "FolderID_xyz789"

    ApiKeyID:
      type: string
      description: Unique identifier for an API key
      example: "ApiKeyID_abc123"

    UserID:
      type: string
      description: Unique identifier for a user
      example: "UserID_abcdef123456"

    TeamID:
      type: string
      description: Unique identifier for a group
      example: "TeamID_123456"

    TeamInviteID:
      type: string
      description: Unique identifier for a group invite
      example: "TeamInviteID_abc123"

    GranteeID:
      type: string
      description: Either a UserID or TeamID
      example: "TeamID_abcdef123456"

    DiskID:
      type: string
      description: Unique identifier for a disk
      example: "DiskID_abc123"

    DriveID:
      type: string
      description: Unique identifier for a drive
      example: "DriveID_abc123"

    GiftCardID:
      type: string
      description: Unique identifier for a gift card
      example: "GiftCardID_abc123"

    LabelID:
      type: string
      description: Unique identifier for a label
      example: "LabelID_abc123"

    WebhookID:
      type: string
      description: Unique identifier for a webhook
      example: "WebhookID_abc123"

    StateDiffRecordID:
      type: string
      description: Unique identifier for a state diff record
      example: "StateDiffRecordID_abc123"

    DirectoryResourceID:
      type: string
      description: Unique identifier for a directory resource (file or folder)
      enum:
        - "FileID_<id>"
        - "FolderID_<id>"
      example: "FileID_abcdef123456"

    SystemResourceID:
      type: object
      description: Unique identifier for a system resource (table or record)
      oneOf:
        - $ref: "#/components/schemas/SystemTableResource"
        - $ref: "#/components/schemas/SystemRecordResource"

    DirectoryPermissionID:
      type: string
      description: Unique identifier for a directory permission
      example: "DirectoryPermissionID_abc123"

    SystemPermissionID:
      type: string
      description: Unique identifier for a system permission
      example: "SystemPermissionID_abc123"

    ListDirectoryRequest:
      type: object
      properties:
        folder_id:
          type: string
          description: ID of the folder to list contents from
          nullable: true
          example: "FolderID_abc123"
        path:
          type: string
          description: Path to the folder to list contents from
          nullable: true
          example: "/documents/project/"
        filters:
          type: string
          description: Filter string for directory contents
          default: ""
          maxLength: 256
        page_size:
          type: integer
          description: Number of items per page
          default: 50
          minimum: 1
          maximum: 1000
        direction:
          type: string
          enum: [ASC, DESC]
          description: Sort direction
          default: "ASC"
        cursor:
          type: string
          description: Cursor for pagination
          nullable: true
          maxLength: 256
      description: Request parameters for listing directory contents

    DirectoryListResponse:
      type: object
      properties:
        folders:
          type: array
          items:
            $ref: "#/components/schemas/GetFolderResponse"
          description: List of folders in the directory
        files:
          type: array
          items:
            $ref: "#/components/schemas/GetFileResponse"
          description: List of files in the directory
        total_files:
          type: integer
          description: Total number of files in the directory
        total_folders:
          type: integer
          description: Total number of folders in the directory
        cursor:
          type: string
          description: Cursor for pagination to get the next page
          nullable: true
      required:
        - folders
        - files
        - total_files
        - total_folders

    DirectoryAction:
      type: object
      description: Action to perform on a directory resource
      discriminator:
        propertyName: action
        mapping:
          GET_FILE: "#/components/schemas/GetFileAction"
          GET_FOLDER: "#/components/schemas/GetFolderAction"
          CREATE_FILE: "#/components/schemas/CreateFileAction"
          CREATE_FOLDER: "#/components/schemas/CreateFolderAction"
          UPDATE_FILE: "#/components/schemas/UpdateFileAction"
          UPDATE_FOLDER: "#/components/schemas/UpdateFolderAction"
          DELETE_FILE: "#/components/schemas/DeleteFileAction"
          DELETE_FOLDER: "#/components/schemas/DeleteFolderAction"
          COPY_FILE: "#/components/schemas/CopyFileAction"
          COPY_FOLDER: "#/components/schemas/CopyFolderAction"
          MOVE_FILE: "#/components/schemas/MoveFileAction"
          MOVE_FOLDER: "#/components/schemas/MoveFolderAction"
          RESTORE_TRASH: "#/components/schemas/RestoreTrashAction"
      oneOf:
        - $ref: "#/components/schemas/GetFileAction"
        - $ref: "#/components/schemas/GetFolderAction"
        - $ref: "#/components/schemas/CreateFileAction"
        - $ref: "#/components/schemas/CreateFolderAction"
        - $ref: "#/components/schemas/UpdateFileAction"
        - $ref: "#/components/schemas/UpdateFolderAction"
        - $ref: "#/components/schemas/DeleteFileAction"
        - $ref: "#/components/schemas/DeleteFolderAction"
        - $ref: "#/components/schemas/CopyFileAction"
        - $ref: "#/components/schemas/CopyFolderAction"
        - $ref: "#/components/schemas/MoveFileAction"
        - $ref: "#/components/schemas/MoveFolderAction"
        - $ref: "#/components/schemas/RestoreTrashAction"

    DirectoryActionRequestBody:
      type: object
      properties:
        actions:
          type: array
          description: List of directory actions to execute
          items:
            $ref: "#/components/schemas/DirectoryAction"
      required:
        - actions
      example:
        actions:
          - action: "GET_FILE"
            target:
              resource_id: "FileID_abc123"
              resource_path: "DiskID::/documents/project/file.txt"
            payload:
              share_track_hash: "track123"

    GetFileAction:
      type: object
      properties:
        action:
          type: string
          enum: ["GET_FILE"]
        target:
          $ref: "#/components/schemas/ResourceIdentifier"
        payload:
          $ref: "#/components/schemas/GetFilePayload"
      required:
        - action
        - target
        - payload
      example:
        action: "GET_FILE"
        target:
          resource_id: "FileID_abc123"
          resource_path: "DiskID::/documents/project/file.txt"
        payload:
          share_track_hash: "track123"

    GetFileResponse:
      type: object
      properties:
        file:
          $ref: "#/components/schemas/FileRecord"
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/DirectoryResourcePermissionFE"
        requester_id:
          $ref: "#/components/schemas/UserID"
      required:
        - file
        - permissions
        - requester_id

    # Update GetFolderAction Schema
    GetFolderAction:
      x-tags:
        - Directory Actions
      type: object
      properties:
        action:
          type: string
          enum: ["GET_FOLDER"]
        target:
          $ref: "#/components/schemas/ResourceIdentifier"
        payload:
          $ref: "#/components/schemas/GetFolderPayload"
      required:
        - action
        - target
        - payload
      example:
        action: "GET_FOLDER"
        target:
          resource_id: "FolderID_xyz789"
          resource_path: "DiskID::/documents/project/"
        payload:
          share_track_hash: "track456"

    GetFolderResponse:
      type: object
      properties:
        folder:
          $ref: "#/components/schemas/FolderRecord"
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/DirectoryResourcePermissionFE"
        requester_id:
          $ref: "#/components/schemas/UserID"
      required:
        - folder
        - permissions
        - requester_id

    # Update CreateFileAction Schema
    CreateFileAction:
      x-tags:
        - Directory Actions
      type: object
      properties:
        action:
          type: string
          enum: ["CREATE_FILE"]
        target:
          $ref: "#/components/schemas/ResourceIdentifier"
        payload:
          $ref: "#/components/schemas/CreateFilePayload"
      required:
        - action
        - target
        - payload
      example:
        action: "CREATE_FILE"
        target:
          resource_id: "FolderID_xyz789"
          resource_path: "DiskID::/documents/project/"
        payload:
          name: "example.txt"
          extension: "txt"
          tags: ["project", "documentation"]
          file_size: 1024
          raw_url: "https://example.com/file.txt"
          disk_id: "DiskID_abc123"
          expires_at: 1704067200000
          file_conflict_resolution: "KEEP_BOTH"
          has_sovereign_permissions: true
          external_id: "external-file-001"
          external_payload: '{"department": "engineering", "project": "alpha"}'

    # Update CreateFolderAction Schema
    CreateFolderAction:
      x-tags:
        - Directory Actions
      type: object
      properties:
        action:
          type: string
          enum: ["CREATE_FOLDER"]
        target:
          $ref: "#/components/schemas/ResourceIdentifier"
        payload:
          $ref: "#/components/schemas/CreateFolderPayload"
      required:
        - action
        - target
        - payload
      example:
        action: "CREATE_FOLDER"
        target:
          resource_id: "FolderID_xyz789"
          resource_path: "DiskID::/documents/"
        payload:
          name: "project-alpha"
          tags: ["project", "alpha"]
          disk_id: "DiskID_abc123"
          expires_at: 1704067200000
          file_conflict_resolution: "KEEP_BOTH"
          has_sovereign_permissions: true
          external_id: "external-folder-001"
          external_payload: '{"department": "engineering", "project": "alpha"}'

    # Update UpdateFileAction Schema
    UpdateFileAction:
      x-tags:
        - Directory Actions
      type: object
      properties:
        action:
          type: string
          enum: ["UPDATE_FILE"]
        target:
          $ref: "#/components/schemas/ResourceIdentifier"
        payload:
          $ref: "#/components/schemas/UpdateFilePayload"
      required:
        - action
        - target
        - payload
      example:
        action: "UPDATE_FILE"
        target:
          resource_id: "FileID_abc123"
          resource_path: "DiskID::/documents/project/file.txt"
        payload:
          name: "updated-example.txt"
          tags: ["project", "updated"]
          raw_url: "https://example.com/updated-file.txt"
          expires_at: 1704067200000
          external_id: "external-file-001-updated"
          external_payload: '{"department": "engineering", "project": "alpha", "version": 2}'

    # Update UpdateFolderAction Schema
    UpdateFolderAction:
      x-tags:
        - Directory Actions
      type: object
      properties:
        action:
          type: string
          enum: ["UPDATE_FOLDER"]
        target:
          $ref: "#/components/schemas/ResourceIdentifier"
        payload:
          $ref: "#/components/schemas/UpdateFolderPayload"
      required:
        - action
        - target
        - payload
      example:
        action: "UPDATE_FOLDER"
        target:
          resource_id: "FolderID_xyz789"
          resource_path: "DiskID::/documents/project/"
        payload:
          name: "project-beta"
          tags: ["project", "beta"]
          expires_at: 1704067200000
          external_id: "external-folder-001-updated"
          external_payload: '{"department": "engineering", "project": "beta"}'

    # Update DeleteFileAction Schema
    DeleteFileAction:
      x-tags:
        - Directory Actions
      type: object
      properties:
        action:
          type: string
          enum: ["DELETE_FILE"]
        target:
          $ref: "#/components/schemas/ResourceIdentifier"
        payload:
          $ref: "#/components/schemas/DeleteFilePayload"
      required:
        - action
        - target
        - payload
      example:
        action: "DELETE_FILE"
        target:
          resource_id: "FileID_abc123"
          resource_path: "DiskID::/documents/project/file.txt"
        payload:
          permanent: true

    # Update DeleteFolderAction Schema
    DeleteFolderAction:
      x-tags:
        - Directory Actions
      type: object
      properties:
        action:
          type: string
          enum: ["DELETE_FOLDER"]
        target:
          $ref: "#/components/schemas/ResourceIdentifier"
        payload:
          $ref: "#/components/schemas/DeleteFolderPayload"
      required:
        - action
        - target
        - payload
      example:
        action: "DELETE_FOLDER"
        target:
          resource_id: "FolderID_xyz789"
          resource_path: "DiskID::/documents/project/"
        payload:
          permanent: true

    # Update CopyFileAction Schema
    CopyFileAction:
      x-tags:
        - Directory Actions
      type: object
      properties:
        action:
          type: string
          enum: ["COPY_FILE"]
        target:
          $ref: "#/components/schemas/ResourceIdentifier"
        payload:
          $ref: "#/components/schemas/CopyFilePayload"
      required:
        - action
        - target
        - payload
      example:
        action: "COPY_FILE"
        target:
          resource_id: "FileID_abc123"
          resource_path: "DiskID::/documents/project/file.txt"
        payload:
          destination_folder_id: "FolderID_new123"
          destination_folder_path: "/documents/archive/"
          file_conflict_resolution: "KEEP_BOTH"

    # Update CopyFolderAction Schema
    CopyFolderAction:
      x-tags:
        - Directory Actions
      type: object
      properties:
        action:
          type: string
          enum: ["COPY_FOLDER"]
        target:
          $ref: "#/components/schemas/ResourceIdentifier"
        payload:
          $ref: "#/components/schemas/CopyFolderPayload"
      required:
        - action
        - target
        - payload
      example:
        action: "COPY_FOLDER"
        target:
          resource_id: "FolderID_xyz789"
          resource_path: "DiskID::/documents/project/"
        payload:
          destination_folder_id: "FolderID_new123"
          destination_folder_path: "/documents/archive/"
          file_conflict_resolution: "KEEP_BOTH"

    # Update MoveFileAction Schema
    MoveFileAction:
      x-tags:
        - Directory Actions
      type: object
      properties:
        action:
          type: string
          enum: ["MOVE_FILE"]
        target:
          $ref: "#/components/schemas/ResourceIdentifier"
        payload:
          $ref: "#/components/schemas/MoveFilePayload"
      required:
        - action
        - target
        - payload
      example:
        action: "MOVE_FILE"
        target:
          resource_id: "FileID_abc123"
          resource_path: "DiskID::/documents/project/file.txt"
        payload:
          destination_folder_id: "FolderID_new123"
          destination_folder_path: "/documents/archive/"
          file_conflict_resolution: "KEEP_BOTH"

    # Update MoveFolderAction Schema
    MoveFolderAction:
      x-tags:
        - Directory Actions
      type: object
      properties:
        action:
          type: string
          enum: ["MOVE_FOLDER"]
        target:
          $ref: "#/components/schemas/ResourceIdentifier"
        payload:
          $ref: "#/components/schemas/MoveFolderPayload"
      required:
        - action
        - target
        - payload
      example:
        action: "MOVE_FOLDER"
        target:
          resource_id: "FolderID_xyz789"
          resource_path: "DiskID::/documents/project/"
        payload:
          destination_folder_id: "FolderID_new123"
          destination_folder_path: "/documents/archive/"
          file_conflict_resolution: "KEEP_BOTH"

    # Update RestoreTrashAction Schema
    RestoreTrashAction:
      x-tags:
        - Directory Actions
      type: object
      properties:
        action:
          type: string
          enum: ["RESTORE_TRASH"]
        target:
          $ref: "#/components/schemas/ResourceIdentifier"
        payload:
          $ref: "#/components/schemas/RestoreTrashPayload"
      required:
        - action
        - target
        - payload
      example:
        action: "RESTORE_TRASH"
        target:
          resource_id: "FolderID_xyz789"
          resource_path: "DiskID::/trash/project/"
        payload:
          file_conflict_resolution: "KEEP_BOTH"
          restore_to_folder_path: "/restored-files/project/"

    DirectoryActionEnum:
      type: string
      description: Type of directory action to perform
      enum:
        - GET_FILE
        - GET_FOLDER
        - CREATE_FILE
        - CREATE_FOLDER
        - UPDATE_FILE
        - UPDATE_FOLDER
        - DELETE_FILE
        - DELETE_FOLDER
        - COPY_FILE
        - COPY_FOLDER
        - MOVE_FILE
        - MOVE_FOLDER
        - RESTORE_TRASH

    ResourceIdentifier:
      type: object
      properties:
        resource_path:
          type: string
          description: Full path to the resource
          example: "/documents/project/file.txt"
        resource_id:
          $ref: "#/components/schemas/DirectoryResourceID"
      description: Identifies a resource by either path or ID

    FileConflictResolutionEnum:
      type: string
      description: How to handle file name conflicts during copy, move, or restore operations
      enum:
        - REPLACE
        - KEEP_BOTH
        - KEEP_ORIGINAL
        - KEEP_NEWER

    DriveFullFilePath:
      type: string
      description: Full path to a file or folder in the drive
      example: "DiskId::/documents/project/myfile.txt"

    # Action Payloads
    GetFilePayload:
      type: object
      properties:
        share_track_hash:
          type: string
          description: Hash for share tracking
          nullable: true

    GetFolderPayload:
      type: object
      properties:
        share_track_hash:
          type: string
          description: Hash for share tracking
          nullable: true

    CreateFilePayload:
      type: object
      description: Payload for creating a file. Clients can specify body.id = uuidv4 if they want.
      properties:
        name:
          type: string
          description: Name of the file
        extension:
          type: string
          description: File extension
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagValue"
          description: Tags to associate with the file
        file_size:
          type: integer
          format: int64
          description: Size of the file in bytes
        raw_url:
          type: string
          description: URL where the raw file content can be accessed
        disk_id:
          $ref: "#/components/schemas/DiskID"
          description: ID of the disk where the file will be stored
        expires_at:
          type: integer
          format: int64
          description: Timestamp when the file expires
          nullable: true
        file_conflict_resolution:
          $ref: "#/components/schemas/FileConflictResolutionEnum"
          nullable: true
        has_sovereign_permissions:
          type: boolean
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          nullable: true
      required:
        - name
        - extension
        - tags
        - file_size
        - raw_url
        - disk_id

    CreateFolderPayload:
      type: object
      description: Payload for creating a folder. Clients can specify body.id = uuidv4 if they want.
      properties:
        name:
          type: string
          description: Name of the folder
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagValue"
          description: Tags to associate with the folder
        disk_id:
          $ref: "#/components/schemas/DiskID"
          description: ID of the disk where the folder will be stored
        expires_at:
          type: integer
          format: int64
          description: Timestamp when the folder expires
          nullable: true
        file_conflict_resolution:
          $ref: "#/components/schemas/FileConflictResolutionEnum"
          nullable: true
        has_sovereign_permissions:
          type: boolean
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          nullable: true
      required:
        - name
        - tags
        - disk_id

    UpdateFilePayload:
      type: object
      properties:
        name:
          type: string
          description: New name for the file
          nullable: true
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagValue"
          description: New tags for the file
          nullable: true
        raw_url:
          type: string
          description: New URL where the raw file content can be accessed
          nullable: true
        expires_at:
          type: integer
          format: int64
          description: New expiration timestamp
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          nullable: true

    UpdateFolderPayload:
      type: object
      properties:
        name:
          type: string
          description: New name for the folder
          nullable: true
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagValue"
          description: New tags for the folder
          nullable: true
        expires_at:
          type: integer
          format: int64
          description: New expiration timestamp
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          nullable: true

    DeleteFilePayload:
      type: object
      properties:
        permanent:
          type: boolean
          description: Whether to permanently delete the file or move it to trash
      required:
        - permanent

    DeleteFolderPayload:
      type: object
      properties:
        permanent:
          type: boolean
          description: Whether to permanently delete the folder or move it to trash
      required:
        - permanent

    CopyFilePayload:
      type: object
      description: Payload for copying a file. Clients can specify body.new_copy_id = uuidv4 if they want.
      properties:
        destination_folder_id:
          $ref: "#/components/schemas/FolderID"
          description: ID of the destination folder
          nullable: true
        destination_folder_path:
          type: string
          description: Path to the destination folder
          nullable: true
        file_conflict_resolution:
          $ref: "#/components/schemas/FileConflictResolutionEnum"
          nullable: true

    CopyFolderPayload:
      type: object
      description: Payload for copying a file. Clients can specify body.new_copy_id = uuidv4 if they want.
      properties:
        destination_folder_id:
          $ref: "#/components/schemas/FolderID"
          description: ID of the destination folder
          nullable: true
        destination_folder_path:
          type: string
          description: Path to the destination folder
          nullable: true
        file_conflict_resolution:
          $ref: "#/components/schemas/FileConflictResolutionEnum"
          nullable: true

    MoveFilePayload:
      type: object
      properties:
        destination_folder_id:
          $ref: "#/components/schemas/FolderID"
          description: ID of the destination folder
          nullable: true
        destination_folder_path:
          type: string
          description: Path to the destination folder
          nullable: true
        file_conflict_resolution:
          $ref: "#/components/schemas/FileConflictResolutionEnum"
          nullable: true

    MoveFolderPayload:
      type: object
      properties:
        destination_folder_id:
          $ref: "#/components/schemas/FolderID"
          description: ID of the destination folder
          nullable: true
        destination_folder_path:
          type: string
          description: Path to the destination folder
          nullable: true
        file_conflict_resolution:
          $ref: "#/components/schemas/FileConflictResolutionEnum"
          nullable: true

    RestoreTrashPayload:
      type: object
      properties:
        file_conflict_resolution:
          $ref: "#/components/schemas/FileConflictResolutionEnum"
          description: How to handle file conflicts during restore
          nullable: true
        restore_to_folder_path:
          type: string
          description: Custom path to restore to (if not using original path)
          nullable: true

    DirectoryActionOutcome:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the action outcome
        success:
          type: boolean
          description: Whether the action was successful
        request:
          $ref: "#/components/schemas/DirectoryAction"
          description: The original request that was executed
        response:
          $ref: "#/components/schemas/DirectoryActionResponse"
          description: The response data from the action
      required:
        - id
        - success
        - request
        - response

    DirectoryActionResponse:
      type: object
      properties:
        result:
          description: Result data for successful actions
          nullable: true
          oneOf:
            - $ref: "#/components/schemas/FileRecord"
            - $ref: "#/components/schemas/FolderRecord"
            - $ref: "#/components/schemas/GetFileResponse"
            - $ref: "#/components/schemas/GetFolderResponse"
            - $ref: "#/components/schemas/CreateFileResponse"
            - $ref: "#/components/schemas/CreateFolderResponse"
            - $ref: "#/components/schemas/UpdateFileResponse"
            - $ref: "#/components/schemas/UpdateFolderResponse"
            - $ref: "#/components/schemas/DeleteFileResponse"
            - $ref: "#/components/schemas/DeleteFolderResponse"
            - $ref: "#/components/schemas/RestoreTrashResponse"
        error:
          type: object
          nullable: true
          properties:
            code:
              type: integer
              description: Error code
            message:
              type: string
              description: Error message
          required:
            - code
            - message
      required:
        - result
        - error

    CreateFileResponse:
      type: object
      properties:
        file:
          $ref: "#/components/schemas/FileRecord"
        upload:
          $ref: "#/components/schemas/DiskUploadResponse"
        notes:
          type: string
      required:
        - file
        - upload
        - notes

    DeleteFileResponse:
      type: object
      properties:
        file_id:
          $ref: "#/components/schemas/FileID"
        path_to_trash:
          type: string
      required:
        - file_id
        - path_to_trash

    DeleteFolderResponse:
      type: object
      properties:
        folder_id:
          $ref: "#/components/schemas/FolderID"
        path_to_trash:
          type: string
        deleted_files:
          type: array
          items:
            $ref: "#/components/schemas/FileID"
          nullable: true
        deleted_folders:
          type: array
          items:
            $ref: "#/components/schemas/FolderID"
          nullable: true
      required:
        - folder_id
        - path_to_trash

    RestoreTrashResponse:
      type: object
      properties:
        restored_files:
          type: array
          items:
            $ref: "#/components/schemas/FileID"
        restored_folders:
          type: array
          items:
            $ref: "#/components/schemas/FolderID"
      required:
        - restored_files
        - restored_folders

    DiskUploadResponse:
      type: object
      properties:
        url:
          type: string
          description: URL to upload file data to
        fields:
          type: object
          additionalProperties:
            type: string
          description: Fields required for upload
      required:
        - url
        - fields

    DirectoryResourcePermissionFE:
      type: object
      properties:
        permission_id:
          type: string
          description: Unique identifier for the permission
        grant_type:
          type: string
          enum: [VIEW, UPLOAD, EDIT, DELETE, INVITE, MANAGE]
          description: Type of permission granted
      required:
        - permission_id
        - grant_type

    SystemTableResource:
      type: object
      properties:
        type:
          type: string
          enum: ["Table"]
        value:
          type: string
          enum:
            [
              "DRIVES",
              "DISKS",
              "CONTACTS",
              "GROUPS",
              "API_KEYS",
              "PERMISSIONS",
              "WEBHOOKS",
              "TAGS",
            ]
      required:
        - type
        - value
      example: { "type": "Table", "value": "DRIVES" }

    SystemRecordResource:
      type: object
      properties:
        type:
          type: string
          enum: ["Record"]
        value:
          type: string
          description: ID with appropriate prefix (e.g., "DriveID_abcdef123456")
      required:
        - type
        - value
      example: { "type": "Record", "value": "DriveID_abcdef123456" }

    StateDiffRecord:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/StateDiffRecordID"
          description: Unique identifier for the state diff
        timestamp_ns:
          type: integer
          format: int64
          description: Timestamp in nanoseconds when the diff was created
        notes:
          type: string
          description: Notes about the diff
          nullable: true
        drive_id:
          $ref: "#/components/schemas/DriveID"
          description: ID of the drive this diff applies to
        endpoint_url:
          type: string
          description: URL endpoint where the diff can be fetched
        implementation:
          type: string
          enum: [RUST_ICP_CANISTER, JAVASCRIPT_RUNTIME]
          description: Implementation type for this diff
        diff_forward:
          type: string
          description: Base64 encoded forward diff
        diff_backward:
          type: string
          description: Base64 encoded backward diff
        checksum_forward:
          type: string
          description: Checksum for the state after applying the forward diff
        checksum_backward:
          type: string
          description: Checksum for the state after applying the backward diff
      required:
        - id
        - timestamp_ns
        - drive_id
        - endpoint_url
        - implementation
        - diff_forward
        - diff_backward
        - checksum_forward
        - checksum_backward

    ContactTeamPreview:
      type: object
      properties:
        group_id:
          $ref: "#/components/schemas/TeamID"
          description: Unique identifier for the group
        invite_id:
          type: string
          description: Unique identifier for the invite, usually the UserID
        is_admin:
          type: bool
          description: Whether the contact is an admin of the group
        group_name:
          type: string
          description: Team name
        group_avatar:
          type: string
          description: URL to the group's avatar image
      required:
        - group_id
        - invite_id
        - is_admin
        - group_name
        - group_avatar

    # =========================================================================
    # Basic Types (Core Types)
    # =========================================================================
    ApiKeyValue:
      type: string
      description: The actual value of an API key. Use it in Authorization Bearer header
      example: "Authorization: Bearer YOUR_API_KEY_VALUE"

    ICPPrincipalString:
      type: string
      description: ICP principal identifier. Eg "_________"

    EvmPublicAddress:
      type: string
      description: EVM public address. Eg "0x_________"

    ExternalID:
      type: string
      description: External identifier for integration purposes
      maxLength: 256

    ExternalPayload:
      type: string
      description: Additional data for external integrations. Eg Stringified JSON
      maxLength: 8192

    TagValue:
      type: string
      description: String value for a label
      maxLength: 256

    DiskType:
      type: string
      description: Type of disk storage, currently supported
      enum:
        - BrowserCache
        - LocalSSD
        - AwsBucket
        - StorjWeb3
        - IcpCanister

    WebhookEventLabel:
      type: string
      description: Type of event that triggers the webhook
      enum:
        - file.viewed
        - file.created
        - file.updated
        - file.deleted
        - file.shared
        - folder.viewed
        - folder.created
        - folder.updated
        - folder.deleted
        - folder.shared
        - subfile.viewed
        - subfile.created
        - subfile.updated
        - subfile.deleted
        - subfile.shared
        - subfolder.viewed
        - subfolder.created
        - subfolder.updated
        - subfolder.deleted
        - subfolder.shared
        - group.invite.created
        - group.invite.updated
        - drive.restore_trash
        - drive.state_diffs
        - label.added
        - label.removed
      example: file.updated

    # ================================= MANAGE ROUTE TYPES ========================================

    CreateDiskRequest:
      type: object
      title: Create a new disk
      description: Create a new disk. Clients can specify body.id = uuidv4 if they want.
      properties:
        name:
          type: string
          description: Name for the disk
          maxLength: 256
        disk_type:
          $ref: "#/components/schemas/DiskType"
        public_note:
          type: string
          description: Public note about the disk
          maxLength: 8192
          nullable: true
        private_note:
          type: string
          description: Private note about the disk
          maxLength: 8192
          nullable: true
        auth_json:
          type: string
          description: Authentication JSON for the disk
          maxLength: 8192
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - name
        - disk_type
      example:
        name: "Project Cloud Storage"
        disk_type: "AwsBucket"
        public_note: "Storage for group project files"
        private_note: "Contains sensitive project data"
        auth_json: '{"access_key": "AKIAIOSFODNN7EXAMPLE", "secret_key": "redacted", "region": "us-west-2", "bucket": "my-project-files"}'
        external_id: "ext-disk-001"
        external_payload: '{"department": "engineering", "cost_center": "cc-12345", "project_id": "p-987654"}'

    UpdateDiskRequest:
      type: object
      title: Update an existing disk
      description: Update an existing disk
      properties:
        id:
          $ref: "#/components/schemas/DiskID"
          description: ID of the disk to update
        name:
          type: string
          description: New name for the disk
          maxLength: 256
          nullable: true
        public_note:
          type: string
          description: Public note about the disk
          maxLength: 8192
          nullable: true
        private_note:
          type: string
          description: Private note about the disk
          maxLength: 8192
          nullable: true
        auth_json:
          type: string
          description: Authentication JSON for the disk
          maxLength: 8192
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - id
      example:
        id: "DiskID_abc123"
        name: "Updated Storage Name"
        public_note: "Primary storage for project Alpha"
        private_note: "Contains confidential project data"
        auth_json: '{"access_key": "AKIAIOSFODNN7UPDATED", "region": "us-east-1", "bucket": "project-alpha-files"}'
        external_id: "ext-disk-001-updated"
        external_payload: '{"department": "engineering", "cost_center": "cc-67890", "project_id": "p-123456", "updated": true}'

    CreateContactRequest:
      type: object
      title: Create a new contact
      description: Create a new contact. Clients can specify body.id = uuidv4 if they want.
      properties:
        icp_principal:
          $ref: "#/components/schemas/ICPPrincipalString"
        name:
          type: string
          description: Name for the contact
          maxLength: 256
        avatar:
          type: string
          description: Profile picture URL
          maxLength: 2048
          nullable: true
        notifications_url:
          type: string
          description: Alternative of email notifications
          maxLength: 256
        email:
          type: string
          description: Primary email for the contact
          maxLength: 256
          nullable: true
        evm_public_address:
          $ref: "#/components/schemas/EvmPublicAddress"
          description: EVM public address
          nullable: true
        public_note:
          type: string
          description: Public note about the contact
          maxLength: 8192
          nullable: true
        private_note:
          type: string
          description: Private note about the contact
          maxLength: 8192
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - icp_principal
        - nickname
      example:
        icp_principal: "xyz123abc456"
        nickname: "John Doe"
        evm_public_address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        public_note: "Project manager for Alpha group"
        private_note: "Primary contact for urgent issues"
        external_id: "emp-1234"
        external_payload: '{"department": "product", "title": "Senior Project Manager", "location": "Remote"}'

    UpdateContactRequest:
      type: object
      title: Update an existing contact
      description: Update an existing contact
      properties:
        id:
          $ref: "#/components/schemas/UserID"
          description: ID of the contact to update
        name:
          type: string
          description: New name for the contact
          maxLength: 256
          nullable: true
        avatar:
          type: string
          description: Profile picture URL
          maxLength: 2048
          nullable: true
        notifications_url:
          type: string
          description: Alternative of email notifications
          maxLength: 256
        email:
          type: string
          description: Primary email for the contact
          maxLength: 256
          nullable: true
        public_note:
          type: string
          description: Public note about the contact
          maxLength: 8192
          nullable: true
        private_note:
          type: string
          description: Private note about the contact
          maxLength: 8192
          nullable: true
        evm_public_address:
          $ref: "#/components/schemas/EvmPublicAddress"
          description: EVM public address
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - id
      example:
        id: "UserID_abc123"
        nickname: "Johnny Doe"
        public_note: "Senior Project Manager for Beta group"
        private_note: "Recently promoted, great communicator"
        evm_public_address: "0x82D7656EC7ab88b098defB751B7401B5f6d8976F"
        icp_principal: "xyz123abc456"
        external_id: "emp-1234-updated"
        external_payload: '{"department": "product", "title": "Lead Project Manager", "location": "Remote", "updated": true}'

    # Drive Request Schemas
    CreateDriveRequest:
      type: object
      description: Create a new drive. Clients can specify body.id = uuidv4 if they want.
      properties:
        name:
          type: string
          description: Name for the drive
          maxLength: 256
        icp_principal:
          $ref: "#/components/schemas/ICPPrincipalString"
        public_note:
          type: string
          description: Public note about the drive
          maxLength: 8192
          nullable: true
        private_note:
          type: string
          description: Private note about the drive
          maxLength: 8192
          nullable: true
        endpoint_url:
          type: string
          description: URL endpoint for the drive
          maxLength: 4096
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - name
      example:
        name: "Project Files"
        icp_principal: "abc123xyz456"
        public_note: "Main project storage"
        private_note: "Contains confidential data"
        endpoint_url: "https://drive.officex.app/project-files"
        external_id: "ext-drive-001"
        external_payload: '{"department": "engineering", "project": "alpha"}'

    UpdateDriveRequest:
      type: object
      description: Update an existing drive
      properties:
        id:
          $ref: "#/components/schemas/DriveID"
          description: ID of the drive to update
        name:
          type: string
          description: New name for the drive
          maxLength: 256
          nullable: true
        public_note:
          type: string
          description: Public note about the drive
          maxLength: 8192
          nullable: true
        private_note:
          type: string
          description: Private note about the drive
          maxLength: 8192
          nullable: true
        icp_principal:
          $ref: "#/components/schemas/ICPPrincipalString"
          nullable: true
        endpoint_url:
          type: string
          description: URL endpoint for the drive
          maxLength: 4096
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - id
      example:
        id: "DriveID_abc123"
        name: "Updated Project Files"
        private_note: "Contains confidential data"
        external_id: "ext-drive-001-updated"
        external_payload: '{"department": "engineering", "project": "alpha", "updated": true}'

    # Team Request Schemas
    CreateTeamRequest:
      type: object
      description: Create a new group. Clients can specify body.id = uuidv4 if they want.
      properties:
        name:
          type: string
          description: Name for the group
          maxLength: 256
        avatar:
          type: string
          description: Profile picture URL
          maxLength: 2048
          nullable: true
        public_note:
          type: string
          description: Public note about the group
          maxLength: 8192
          nullable: true
        private_note:
          type: string
          description: Private note about the group
          maxLength: 8192
          nullable: true
        endpoint_url:
          type: string
          description: URL endpoint for the group
          maxLength: 4096
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - name
      example:
        name: "Product Development"
        public_note: "Core product development group"
        endpoint_url: "https://groups.officex.app/product-dev"
        external_id: "ext-group-001"
        external_payload: '{"department": "engineering", "project": "alpha"}'

    UpdateTeamRequest:
      type: object
      description: Update an existing group
      properties:
        id:
          $ref: "#/components/schemas/TeamID"
          description: ID of the group to update
        name:
          type: string
          description: New name for the group
          maxLength: 256
          nullable: true
        avatar:
          type: string
          description: Profile picture URL
          maxLength: 2048
          nullable: true
        public_note:
          type: string
          description: Public note about the group
          maxLength: 8192
          nullable: true
        private_note:
          type: string
          description: Private note about the group
          maxLength: 8192
          nullable: true
        endpoint_url:
          type: string
          description: URL endpoint for the group
          maxLength: 4096
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - id
      example:
        id: "TeamID_abc123"
        name: "Product & Design"
        private_note: "Updated group structure"
        external_id: "ext-group-001-updated"
        external_payload: '{"department": "engineering", "project": "alpha", "updated": true}'

    # Team Invite Request Schemas
    CreateTeamInviteRequest:
      type: object
      description: Create a new group invite. Clients can specify body.id = uuidv4 if they want.
      properties:
        group_id:
          $ref: "#/components/schemas/TeamID"
          description: ID of the group for the invite
        invitee_id:
          $ref: "#/components/schemas/UserID"
          description: ID of the user to invite
          nullable: true
        role:
          type: string
          enum: [ADMIN, MEMBER]
          description: Role to assign to the invited user
        active_from:
          type: integer
          format: int64
          description: Timestamp when the invite becomes active
          nullable: true
        expires_at:
          type: integer
          format: int64
          description: Timestamp when the invite expires
          nullable: true
        note:
          type: string
          description: Note about the invite
          maxLength: 8192
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - group_id
        - role
      example:
        group_id: "TeamID_abc123"
        invitee_id: "UserID_xyz789"
        role: "MEMBER"
        note: "Invitation to join the project group"
        expires_at: 1672531200000
        external_id: "ext-invite-001"
        external_payload: '{"department": "engineering", "project": "alpha"}'

    UpdateTeamInviteRequest:
      type: object
      description: Update an existing group invite
      properties:
        id:
          $ref: "#/components/schemas/TeamInviteID"
          description: ID of the invite to update
        role:
          type: string
          enum: [ADMIN, MEMBER]
          description: New role to assign
          nullable: true
        active_from:
          type: integer
          format: int64
          description: New timestamp when the invite becomes active
          nullable: true
        expires_at:
          type: integer
          format: int64
          description: New timestamp when the invite expires
          nullable: true
        note:
          type: string
          description: New note about the invite
          maxLength: 8192
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - id
      example:
        id: "TeamInviteID_abc123"
        role: "ADMIN"
        note: "Upgraded to admin role"
        external_id: "ext-invite-001-updated"
        external_payload: '{"department": "engineering", "project": "alpha", "updated": true}'

    # Label Request Schemas
    CreateLabelRequest:
      type: object
      title: Create a new label
      description: Create a new label. Clients can specify body.id = uuidv4 if they want.
      properties:
        value:
          type: string
          description: The label value (e.g., "Project-Alpha")
          maxLength: 256
        description:
          type: string
          description: Description of the label
          maxLength: 8192
          nullable: true
        color:
          type: string
          description: Color in hex format (e.g., #RRGGBB)
          pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - value
      example:
        value: "Project-Alpha"
        description: "All files related to Project Alpha"
        color: "#4287f5"
        external_id: "ext-label-001"
        external_payload: '{"group": "alpha", "some_field": "some_value"}'

    UpdateLabelRequest:
      type: object
      title: Update an existing label
      description: Update an existing label
      properties:
        id:
          $ref: "#/components/schemas/LabelID"
          description: ID of the label to update
        value:
          type: string
          description: New value for the label
          maxLength: 256
          nullable: true
        description:
          type: string
          description: New description for the label
          maxLength: 8192
          nullable: true
        color:
          type: string
          description: New color in hex format (e.g., #RRGGBB)
          pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - id
      example:
        id: "LabelID_abc123"
        value: "Project-Beta"
        color: "#ff7700"
        description: "Updated description for the Beta project"
        external_id: "ext-label-001-updated"
        external_payload: '{"group": "beta", "updated_field": true}'

    # Webhook Request Schemas
    CreateWebhookRequest:
      type: object
      title: Create a new webhook
      description: Create a new webhook. Clients can specify body.id = uuidv4 if they want.
      properties:
        alt_index:
          type: string
          description: Alternative index for the webhook
          maxLength: 256
        url:
          type: string
          description: URL to send webhook events to
          maxLength: 4096
        event:
          $ref: "#/components/schemas/WebhookEventLabel"
          description: Event type to trigger the webhook
        signature:
          type: string
          description: Signature for webhook verification
          maxLength: 256
          nullable: true
        description:
          type: string
          description: Description of the webhook
          maxLength: 8192
          nullable: true
        filters:
          type: string
          description: Filter string for events
          maxLength: 256
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - alt_index
        - url
        - event
      example:
        alt_index: "File_abc246"
        url: "https://example.com/webhooks/file-updated"
        event: "file.updated"
        signature: "sha256-hash"
        description: "Notify when files are updated"
        filters: "group=engineering"
        external_id: "ext-webhook-001"
        external_payload: '{"department": "engineering", "webhookType": "fileUpdates"}'

    UpdateWebhookRequest:
      type: object
      title: Update an existing webhook
      description: Update an existing webhook
      properties:
        id:
          $ref: "#/components/schemas/WebhookID"
          description: ID of the webhook to update
        url:
          type: string
          description: New URL for the webhook
          maxLength: 4096
          nullable: true
        signature:
          type: string
          description: New signature for webhook verification
          maxLength: 256
          nullable: true
        description:
          type: string
          description: New description for the webhook
          maxLength: 8192
          nullable: true
        active:
          type: boolean
          description: Whether the webhook is active
          nullable: true
        filters:
          type: string
          description: New filter string for events
          maxLength: 256
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - id
      example:
        id: "WebhookID_abc123"
        url: "https://updated-example.com/webhooks/callback"
        active: false
        description: "My disabled webhook"
        filters: "group=marketing"
        external_id: "ext-webhook-001-updated"
        external_payload: '{"department": "marketing", "webhookType": "fileUpdates", "disabledReason": "maintenance"}'

    CreateApiKeyRequest:
      type: object
      title: Create a new API key
      description: Create a new API key. Clients can specify body.id = uuidv4 if they want.
      properties:
        name:
          type: string
          description: Name for the API key
          maxLength: 256
        user_id:
          $ref: "#/components/schemas/UserID"
          description: ID of the user to create the API key for
          nullable: true
        expires_at:
          type: integer
          format: int64
          description: Timestamp when the key expires, -1 for never expires
          nullable: true
        external_id:
          type: string
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          type: string
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - name
      example:
        name: "Development API Key"
        user_id: "UserID_abc123"
        expires_at: 1703980800000
        external_id: "ext-key-001"
        external_payload: '{"department": "engineering", "purpose": "backend-integration"}'

    UpdateApiKeyRequest:
      type: object
      title: Update an existing API key
      description: Update an existing API key
      properties:
        id:
          $ref: "#/components/schemas/ApiKeyID"
          description: ID of the API key to update
          maxLength: 256
        name:
          type: string
          description: New name for the API key
          maxLength: 256
          nullable: true
        expires_at:
          type: integer
          format: int64
          description: New expiration timestamp, -1 for never expires
          nullable: true
        is_revoked:
          type: boolean
          description: Whether to revoke the API key
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - id
      example:
        id: "ApiKeyID_abc123"
        name: "Production API Key"
        is_revoked: false
        expires_at: -1
        external_id: "ext-key-001-prod"
        external_payload: '{"department": "engineering", "purpose": "production-access", "approved_by": "manager-id-123"}'

    # Directory Permission Request Schemas
    CreateDirectoryPermissionRequest:
      type: object
      description: Create a new directory permission. Clients can specify body.id = uuidv4 if they want.
      properties:
        resource_id:
          $ref: "#/components/schemas/DirectoryResourceID"
          description: ID of the resource to grant permission for
        granted_to:
          $ref: "#/components/schemas/GranteeID"
          description: ID of the user/group to grant permission to
          nullable: true
        permission_types:
          type: array
          items:
            type: string
            enum: [VIEW, UPLOAD, EDIT, DELETE, INVITE, MANAGE]
          description: Types of permissions to grant
        begin_date_ms:
          type: integer
          format: int64
          description: When the permission becomes active
          nullable: true
        expiry_date_ms:
          type: integer
          format: int64
          description: When the permission expires
          nullable: true
        inheritable:
          type: boolean
          description: Whether permission applies to sub-resources
        note:
          type: string
          description: Note about the permission
          maxLength: 8192
          nullable: true
        metadata:
          type: object
          description: Additional metadata for the permission
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - resource_id
        - permission_types
      example:
        resource_id: "FolderID_abc123"
        granted_to: "UserID_xyz789"
        permission_types: ["VIEW", "EDIT"]
        begin_date_ms: 1672531200000
        expiry_date_ms: 1688169600000
        inheritable: true
        note: "Read and edit access to project folder"
        metadata:
          custom_field: "custom_value"
        external_id: "ext-perm-001"
        external_payload: '{"department": "engineering", "project": "alpha"}'

    UpdateDirectoryPermissionRequest:
      type: object
      description: Update an existing directory permission
      properties:
        id:
          $ref: "#/components/schemas/DirectoryPermissionID"
          description: ID of the permission to update
        resource_id:
          $ref: "#/components/schemas/DirectoryResourceID"
          description: ID of the resource to grant permission for
          nullable: true
        granted_to:
          $ref: "#/components/schemas/GranteeID"
          description: ID of the user/group to grant permission to
          nullable: true
        permission_types:
          type: array
          items:
            type: string
            enum: [VIEW, UPLOAD, EDIT, DELETE, INVITE, MANAGE]
          description: Types of permissions to grant
          nullable: true
        begin_date_ms:
          type: integer
          format: int64
          description: When the permission becomes active
          nullable: true
        expiry_date_ms:
          type: integer
          format: int64
          description: When the permission expires
          nullable: true
        inheritable:
          type: boolean
          description: Whether permission applies to sub-resources
          nullable: true
        note:
          type: string
          description: Note about the permission
          maxLength: 8192
          nullable: true
        metadata:
          type: object
          description: Additional metadata for the permission
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - id
      example:
        id: "DirectoryPermissionID_abc123"
        permission_types: ["VIEW", "EDIT", "DELETE"]
        expiry_date_ms: 1688169600000
        note: "Updated access with deletion rights"
        metadata:
          custom_field: "updated_value"
        external_id: "ext-perm-001-updated"
        external_payload: '{"department": "engineering", "project": "alpha", "updated": true}'

    CreateSystemPermissionRequest:
      type: object
      description: Create a new system permission. Clients can specify body.id = uuidv4 if they want.
      properties:
        resource_id:
          $ref: "#/components/schemas/SystemResourceID"
          description: ID of the resource to grant permission for
        granted_to:
          $ref: "#/components/schemas/GranteeID"
          description: ID of the user/group to grant permission to
          nullable: true
        permission_types:
          type: array
          items:
            type: string
            enum: [CREATE, EDIT, DELETE, VIEW, INVITE]
          description: Types of permissions to grant
        begin_date_ms:
          type: integer
          format: int64
          description: When the permission becomes active
          nullable: true
        expiry_date_ms:
          type: integer
          format: int64
          description: When the permission expires
          nullable: true
        note:
          type: string
          description: Note about the permission
          maxLength: 8192
          nullable: true
        metadata:
          type: object
          description: Additional metadata for the permission
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - resource_id
        - permission_types
      example:
        resource_id:
          type: "Table"
          value: "DRIVES"
        granted_to: "UserID_xyz789"
        permission_types: ["VIEW", "CREATE"]
        begin_date_ms: 1672531200000
        expiry_date_ms: 1688169600000
        note: "Allow user to view and create drives"
        metadata:
          custom_field: "custom_value"
        external_id: "ext-perm-002"
        external_payload: '{"department": "engineering", "project": "alpha"}'

    UpdateSystemPermissionRequest:
      type: object
      description: Update an existing system permission
      properties:
        id:
          $ref: "#/components/schemas/SystemPermissionID"
          description: ID of the permission to update
        resource_id:
          $ref: "#/components/schemas/SystemResourceID"
          description: ID of the resource to grant permission for
          nullable: true
        granted_to:
          $ref: "#/components/schemas/GranteeID"
          description: ID of the user/group to grant permission to
          nullable: true
        permission_types:
          type: array
          items:
            type: string
            enum: [CREATE, EDIT, DELETE, VIEW, INVITE]
          description: Types of permissions to grant
          nullable: true
        begin_date_ms:
          type: integer
          format: int64
          description: When the permission becomes active
          nullable: true
        expiry_date_ms:
          type: integer
          format: int64
          description: When the permission expires
          nullable: true
        note:
          type: string
          description: Note about the permission
          maxLength: 8192
          nullable: true
        metadata:
          type: object
          description: Additional metadata for the permission
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalID"
          description: External identifier
          maxLength: 256
          nullable: true
        external_payload:
          $ref: "#/components/schemas/ExternalPayload"
          description: Additional data for external systems
          maxLength: 8192
          nullable: true
      required:
        - action
        - id
      example:
        id: "SystemPermissionID_abc123"
        permission_types: ["VIEW", "CREATE", "EDIT"]
        expiry_date_ms: 1688169600000
        note: "Updated with update permission"
        metadata:
          custom_field: "updated_value"
        external_id: "ext-perm-002-updated"
        external_payload: '{"department": "engineering", "project": "alpha", "updated": true}'

    # Common error response
    ErrorResponse:
      type: object
      properties:
        err:
          type: object
          properties:
            code:
              type: integer
              format: int32
              description: HTTP error code
            message:
              type: string
              description: Error message
          required:
            - code
            - message
      required:
        - err
