openapi: 3.0.0
info:
  title: OfficeX Drive REST API
  version: "1.0.0"
  description: API for managing files, folders, teams, and access in an Internet Computer canister

servers:
  - url: https://{canister_id}.raw.ic0.app
    description: IC Mainnet
    variables:
      canister_id:
        description: The canister ID on the Internet Computer
        default: "aaaaa-aa"

tags:
  - name: Auth
    description: Authentication and API key management
  - name: Directory
    description: File and folder operations
  - name: Rolodex
    description: Team, contact, and drive management
  - name: Webhooks
    description: Webhook configuration and management

paths:
  # Auth Section
  /api-keys/get/{key}:
    get:
      tags:
        - Auth
      summary: Get API key information
      description: Retrieves detailed information about a specific API key including its status and permissions.
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
          description: API key value
      responses:
        "200":
          description: API key information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKey"

  /api-keys/list/{user_id}:
    get:
      tags:
        - Auth
      summary: List all API keys for a user
      description: Retrieves a list of all API keys associated with the specified user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: UserID of the user
      responses:
        "200":
          description: List of API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/APIKey"

  /api-keys/upsert:
    post:
      tags:
        - Auth
      summary: Create or update API key
      description: Creates a new API key or updates an existing key's metadata.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CreateAPIKeyRequest"
                - $ref: "#/components/schemas/UpdateAPIKeyRequest"
      responses:
        "200":
          description: Updated API key information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKey"

  /api-keys/delete:
    post:
      tags:
        - Auth
      summary: Delete API key
      description: Permanently deletes an API key.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                key_id:
                  type: string
                  description: Unique identifier of the API key to delete
      responses:
        "200":
          description: Deletion confirmation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the key was successfully deleted

  # Filesystem Section
  /directory/list:
    post:
      tags:
        - Directory
      summary: Query files and folders by path or ID
      description: Flexible query endpoint that can return both files and folders based on path or ID, with pagination support.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListDirectoryRequest"
      responses:
        "200":
          description: List of files and folders
          content:
            application/json:
              schema:
                type: object
                properties:
                  folders:
                    type: array
                    items:
                      $ref: "#/components/schemas/FolderMetadata"
                  files:
                    type: array
                    items:
                      $ref: "#/components/schemas/FileMetadata"
                  total_files:
                    type: integer
                  total_folders:
                    type: integer
                  cursorUp:
                    type: string
                  cursorDown:
                    type: string

  /directory/sync:
    post:
      tags:
        - Directory
      summary: Sync local changes to cloud
      description: Synchronizes local changes with the cloud storage.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - paths
              properties:
                path:
                  - type: string
      responses:
        "200":
          description: Synced metadata
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/FileMetadata"
                  - $ref: "#/components/schemas/FolderMetadata"

  /directory/folder/get:
    post:
      tags:
        - Directory
      summary: Get a folder
      description: Universal endpoint for getting a folder.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: At least a path or ID is required
              properties:
                folder_id:
                  type: string
                  description: "ID of the folder"
                path:
                  type: string
                  description: "Path to the folder"
      responses:
        "200":
          description: Metadata of folder
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/FolderMetadata"

  /directory/folder/upsert:
    post:
      tags:
        - Directory
      summary: Create or update a folder
      description: Universal endpoint for creating or updating folders.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CreateFolderRequest"
                - $ref: "#/components/schemas/UpdateFolderRequest"
      responses:
        "200":
          description: Updated metadata of the folder
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/FolderMetadata"

  /directory/folder/delete:
    post:
      tags:
        - Directory
      summary: Mark a folder as deleted
      description: Marks the specified folder as deleted.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FolderRequest"
      responses:
        "200":
          description: Deletion confirmation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean

  /directory/file/get:
    post:
      tags:
        - Directory
      summary: Get a file
      description: Endpoint to get a file
      requestBody:
        content:
          application/json:
            schema:
              description: At least a path or ID is required
              properties:
                file_id:
                  type: string
                  description: "ID of the file"
                path:
                  type: string
                  description: "Path to the file"
      responses:
        "200":
          description: Updated metadata of the file
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/FileMetadata"

  /directory/file/upsert:
    post:
      tags:
        - Directory
      summary: Create or update a file
      description: Universal endpoint for creating or updating files
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CreateFileRequest"
                - $ref: "#/components/schemas/UpdateFileRequest"
      responses:
        "200":
          description: Updated metadata of the file
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/FileMetadata"

  /directory/file/delete:
    post:
      tags:
        - Directory
      summary: Mark a file as deleted
      description: Marks the specified file as deleted.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileRequest"
      responses:
        "200":
          description: Deletion confirmation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean

  # Organization Section
  /drive/info:
    get:
      tags:
        - Rolodex
      summary: Get drive information
      description: Retrieves the drive's metadata including username, owner, and notes.
      responses:
        "200":
          description: Current drive information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DriveInfo"
    post:
      tags:
        - Rolodex
      summary: Update drive information
      description: Updates the drive's metadata including username, owner, and notes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DriveInfo"
      responses:
        "200":
          description: Current drive information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DriveInfo"

  /rolodex/canisters/list:
    post:
      tags: [Rolodex]
      summary: List all 3rd party drive canisters
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListRequest"
      responses:
        "200":
          description: List of drive canisters
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/DriveInfo"
                  total:
                    type: integer
                  cursor_up:
                    type: string
                  cursor_down:
                    type: string

  /rolodex/canisters/get/{id}:
    get:
      tags:
        - Rolodex
      summary: Get 3rd party drive canister details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Drive canister details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DriveInfo"

  /rolodex/canisters/upsert:
    post:
      tags: [Rolodex]
      summary: Add 3rd party drive canister
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CreateCansiterRequest"
                - $ref: "#/components/schemas/UpdateCansiterRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DriveInfo"

  /rolodex/canisters/delete:
    post:
      tags: [Rolodex]
      summary: Delete 3rd party drive canister
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean

  /rolodex/contacts/get/{id}:
    get:
      tags:
        - Rolodex
      summary: Get contact information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Principal ID of the contact
      responses:
        "200":
          description: Contact information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"

  /rolodex/contacts/list:
    post:
      tags: [Rolodex]
      summary: List all contacts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Contact"
                  total:
                    type: integer
                  cursor_up:
                    type: string
                  cursor_down:
                    type: string

  /rolodex/contacts/upsert:
    post:
      tags: [Rolodex]
      summary: Create or update contact
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CreateContactRequest"
                - $ref: "#/components/schemas/UpdateContactRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"

  /rolodex/teams/get/{id}:
    get:
      tags:
        - Rolodex
      summary: Get team information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Team identifier
      responses:
        "200":
          description: Team information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"

  /rolodex/teams/list:
    post:
      tags: [Rolodex]
      summary: List all teams
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Team"
                  total:
                    type: integer
                  cursor_up:
                    type: string
                  cursor_down:
                    type: string

  /rolodex/teams/upsert:
    post:
      tags: [Rolodex]
      summary: Create or update team
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CreateTeamRequest"
                - $ref: "#/components/schemas/UpdateTeamRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"

  /rolodex/teams/delete:
    post:
      tags: [Rolodex]
      summary: Delete team
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean

  /rolodex/teams/get/{teamId}/invites/list:
    post:
      tags: [Rolodex]
      summary: List team invites with pagination
      parameters:
        - name: teamId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListRequest"
      responses:
        "200":
          description: Paginated list of team invites
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/TeamInvite"
                  total:
                    type: integer
                  cursor_up:
                    type: string
                  cursor_down:
                    type: string

  /rolodex/teams/get/{teamId}/invites/get/{inviteId}:
    get:
      tags: [Rolodex]
      summary: Get team invite details
      parameters:
        - name: teamId
          in: path
          required: true
          schema: { type: string }
        - name: inviteId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamInvite"

  /rolodex/teams/get/{teamId}/invites/upsert:
    post:
      tags: [Rolodex]
      summary: Create or update team invite
      parameters:
        - name: teamId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CreateTeamInviteRequest"
                - $ref: "#/components/schemas/UpdateTeamInviteRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamInvite"

  /rolodex/teams/get/{teamId}/invites/delete:
    post:
      tags: [Rolodex]
      summary: Remove team invite
      parameters:
        - name: teamId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                invite_id:
                  type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }

  # Webhooks Section
  /webhooks/list:
    post:
      tags: [Webhooks]
      summary: List all webhooks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/WebhookConfiguration"
                  total:
                    type: integer
                  cursor_up:
                    type: string
                  cursor_down:
                    type: string

  /webhooks/get/{webhook_id}:
    get:
      tags:
        - Webhooks
      summary: Get webhook details
      parameters:
        - name: webhook_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Webhook configuration details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookConfiguration"

  /webhooks/delete:
    post:
      tags: [Webhooks]
      summary: Delete webhook
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean

  /webhooks/upsert:
    post:
      tags: [Webhooks]
      summary: Create or update webhook
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CreateWebhookRequest"
                - $ref: "#/components/schemas/UpdateWebhookRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookConfiguration"

components:
  schemas:
    StorageLocation:
      type: string
      enum: [BrowserCache, HardDrive, Web3Storj]

    Error:
      type: object
      properties:
        status:
          type: string
          example: "400 - Bad Request"
        message:
          type: string
          example: "Operation failed"

    DriveInfo:
      type: object
      properties:
        username:
          type: string
          example: "alice123"
        owner_id:
          type: string
          example: "2vxsx-fae"
        canister_id:
          type: string
          example: "2vxsx-fae"
        gas_remaining:
          type: number
          example: 2543656
        public_note:
          type: string
          example: "Alice's Drive"
        private_note:
          type: string
          example: "Personal storage for work files"

    CreateCansiterRequest:
      type: object
      required: [canister_id]
      properties:
        canister_id:
          type: string
        public_note:
          type: string
        private_note:
          type: string

    UpdateCansiterRequest:
      type: object
      required: [id]
      properties:
        id:
          type: string
        public_note:
          type: string
        private_note:
          type: string

    ListRequest:
      type: object
      properties:
        filters:
          type: string
        limit:
          type: integer
          default: 50
        cursor_up:
          type: string
        cursor_down:
          type: string

    FolderRequest:
      type: object
      description: At least a path or ID is required
      properties:
        path:
          type: string
          example: "Web3Storj::documents/work/"
          description: "Path to the folder"
        folder_id:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
          description: "ID of folder"

    FileRequest:
      type: object
      description: At least a path or ID is required
      properties:
        path:
          type: string
          example: "Web3Storj::documents/work/"
          description: "Path to the file"
        file_id:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
          description: "ID of file"

    ListDirectoryRequest:
      allOf:
        - $ref: "#/components/schemas/FolderRequest"
        - type: object
          properties:
            filters:
              type: string
              default: ""
            limit:
              type: integer
              default: 50
            cursor_up:
              type: string
              default: 0
            cursor_down:
              type: string
              default: 0

    FileMetadata:
      type: object
      properties:
        id:
          type: string
        file_name:
          type: string
        folder_uuid:
          type: string
        file_version:
          type: integer
        extension:
          type: string
        full_file_path:
          type: string
        tags:
          type: array
          items:
            type: string
        owner:
          type: string
        created_date:
          type: integer
          format: int64
        storage_location:
          $ref: "#/components/schemas/StorageLocation"
        file_size:
          type: integer
          format: int64
        last_changed_unix_ms:
          type: integer
          format: int64
        deleted:
          type: boolean
        expires_at:
          type: integer
          format: int64

    CreateFileRequest:
      type: object
      required:
        - file_name
        - parent_folder_id
      properties:
        file_name:
          type: string
        parent_folder_id:
          type: string
          description: "ID of parent folder"
        expires_at:
          type: integer
          format: int64
          description: "Unix seconds to expiry. Defaults -1 for never expires, 0 for hardcoded expiration"

    UpdateFileRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: "ID of the file to update"
        name:
          type: string
          description: "New name for the file"
        tags:
          type: array
          items:
            type: string
        expires_at:
          type: integer
          format: int64
          description: "Unix seconds to expiry. Defaults -1 for never expires, 0 for hardcoded expiration"
        deleted:
          type: boolean
          description: "Whether file appears deleted"

    FolderMetadata:
      type: object
      properties:
        id:
          type: string
        folder_name:
          type: string
        parent_folder_id:
          type: string
        subfolder_uuids:
          type: array
          items:
            type: string
        file_uuids:
          type: array
          items:
            type: string
        full_folder_path:
          type: string
        tags:
          type: array
          items:
            type: string
        owner:
          type: string
        created_date:
          type: integer
          format: int64
        storage_location:
          $ref: "#/components/schemas/StorageLocation"
        last_changed_unix_ms:
          type: integer
          format: int64
        deleted:
          type: boolean
        expires_at:
          type: integer
          format: int64

    CreateFolderRequest:
      type: object
      required:
        - folder_name
        - parent_folder_id
      properties:
        folder_name:
          type: string
        parent_folder_id:
          type: string
          description: "ID of parent folder"
        expires_at:
          type: integer
          format: int64
          description: "Unix seconds to expiry. Defaults -1 for never expires, 0 for hardcoded expiration"

    UpdateFolderRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: "ID of the folder to update"
        name:
          type: string
          description: "New name for the folder"
        tags:
          type: array
          items:
            type: string
        expires_at:
          type: integer
          format: int64
          description: "Unix seconds to expiry. Defaults -1 for never expires, 0 for hardcoded expiration"
        deleted:
          type: boolean
          description: "Whether folder appears deleted"

    Contact:
      type: object
      properties:
        id:
          type: string
        nickname:
          type: string
        evm_public_address:
          type: string
        icp_principal:
          type: string
        api_keys:
          type: array
          items:
            type: string
        teams:
          type: array
          items:
            type: string
        shared_drives:
          type: array
          items:
            type: string

    TeamInvite:
      type: object
      properties:
        id:
          type: string
        team_id:
          type: string
        user_id:
          type: string
        invited_by:
          type: string
        invited_at:
          type: integer
          format: int64
        role:
          type: string
          enum: [Member, Admin, Owner]
        active_from:
          type: integer
          format: int64
        expires_at:
          type: integer
          format: int64
        status:
          type: string
          enum: [Pending, Accepted, Expired]
          default: "Pending"

    CreateTeamInviteRequest:
      type: object
      required: [user_id, role]
      properties:
        user_id:
          type: string
        role:
          type: string
          enum: [Member, Admin, Owner]
        expires_at:
          type: integer
          format: int64
        custom_message:
          type: string

    UpdateTeamInviteRequest:
      type: object
      required: [id]
      properties:
        id:
          type: string
        role:
          type: string
          enum: [Member, Admin, Owner]
        expires_at:
          type: integer
          format: int64
        status:
          type: string
          enum: [Pending, Accepted, Expired]

    Team:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        owner:
          type: string
        admins:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/TeamInvite"
        members:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/TeamInvite"
        created_at:
          type: integer
          format: int64
        last_modified_at:
          type: integer
          format: int64
        canister_id:
          type: string

    APIKey:
      type: object
      properties:
        id:
          type: string
        key:
          type: string
        user_id:
          type: string
        name:
          type: string
        created_at:
          type: integer
          format: int64
        expires_at:
          type: integer
          format: int64
          description: Unix seconds when the key expires. Defaults -1 for never expires, 0 for hardcoded expiration
        is_revoked:
          type: boolean

    CreateAPIKeyRequest:
      type: object
      required:
        - name
        - user_id
      properties:
        name:
          type: string
          description: "Name of the API key"
        user_id:
          type: string
          description: "User ID who owns this key"
        expires_at:
          type: integer
          format: int64
          description: "Optional expiration timestamp"

    UpdateAPIKeyRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: "ID of the API key to update"
        name:
          type: string
          description: "New name for the API key"
        expires_at:
          type: integer
          format: int64
          description: "New expiration timestamp"
        is_revoked:
          type: boolean
          description: "Whether to revoke the key"

    WebhookConfiguration:
      type: object
      required:
        - url
        - events
      properties:
        id:
          type: string
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string
            enum:
              - file.viewed
              - file.created
              - file.updated
              - file.deleted
              - file.shared
              - folder.viewed
              - folder.created
              - folder.updated
              - folder.deleted
              - folder.shared
              - team.invite.created
              - team.invite.updated
              - drive.gas_low
              - drive.sync_completed
        proof:
          type: string
        description:
          type: string
        active:
          type: boolean
          default: true

    CreateContactRequest:
      type: object
      required: [id, nickname]
      properties:
        id:
          type: string
        nickname:
          type: string
        evm_public_address:
          type: string
        icp_principal:
          type: string

    UpdateContactRequest:
      type: object
      required: [id]
      properties:
        id:
          type: string
        nickname:
          type: string
        evm_public_address:
          type: string
        icp_principal:
          type: string

    CreateTeamRequest:
      type: object
      required: [name, owner]
      properties:
        name:
          type: string
        owner:
          type: string
        admins:
          type: array
          items:
            type: string

    UpdateTeamRequest:
      type: object
      required: [id]
      properties:
        id:
          type: string
        name:
          type: string
        owner:
          type: string
        admins:
          type: array
          items:
            type: string

    CreateWebhookRequest:
      type: object
      required: [url, events]
      properties:
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string
        proof:
          type: string
        description:
          type: string

    UpdateWebhookRequest:
      type: object
      required: [id]
      properties:
        id:
          type: string
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string
        proof:
          type: string
        description:
          type: string
        active:
          type: boolean

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: api-key
      description: API key for programmatic access

security:
  - ApiKeyAuth: []
